/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.11.2023 04:31:31

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 368208;
#else
constexpr int kTensorArenaSize = 367184;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,120,120,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038549480959773064, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[13] = { 14360, -22687, -24748, -17303, -23042, -14285, -20866, -17149, -28573, -12255, -23290, -17675, -27893, };
const TfArray<1, int> tensor_dimension2 = { 1, { 13 } };
const TfArray<13, float> quant2_scale = { 13, { 0.00039250648114830256, 0.00038088043220341206, 0.00033788720611482859, 0.00047957024071365595, 0.00037209794390946627, 0.00054073851788416505, 0.00037113795406185091, 0.00044561218237504363, 0.00027387798763811588, 0.00061644765082746744, 0.00032403873046860099, 0.00042612702236510813, 0.00027237905305810273, } };
const TfArray<13, int> quant2_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[13*1*1*32] = { 
  /* [0][0][][] */ 8,-26,127,-58,-8,57,-22,-40,-20,-95,64,119,-113,-30,-1,-47,-62,17,39,-38,55,56,-12,96,28,-80,-61,-25,16,68,119,-62, 
  /* [1][0][][] */ 44,65,11,61,-63,53,-25,73,58,13,27,-127,91,8,74,-76,4,-34,-55,-14,-18,15,-76,-34,19,-72,-94,-20,-92,-90,-111,18, 
  /* [2][0][][] */ -34,8,-43,-88,23,110,-11,-8,83,76,54,-32,-89,-45,52,78,72,36,-11,-76,3,61,46,-33,46,14,-25,-104,-102,72,-127,14, 
  /* [3][0][][] */ 52,83,21,42,-4,-20,-48,-4,-48,16,8,-92,-50,-72,-30,-60,2,-103,41,-12,39,59,-14,65,47,-8,0,27,31,56,-127,-5, 
  /* [4][0][][] */ -30,-29,35,18,10,-77,-106,-23,29,-17,-76,-66,6,53,-64,44,41,-127,-84,69,98,37,-14,-47,-13,-77,37,15,65,39,15,16, 
  /* [5][0][][] */ 40,-13,2,36,58,43,-102,12,-26,45,-69,49,-10,26,68,-43,44,-35,32,44,34,-15,-2,-48,-20,42,-27,20,43,-29,-127,25, 
  /* [6][0][][] */ 90,0,86,29,-73,-56,-49,8,-62,31,71,76,23,16,-71,43,-15,-102,-7,-42,-43,-56,13,-47,71,60,83,-63,47,-1,-127,-13, 
  /* [7][0][][] */ -36,-12,-30,-32,-69,-68,-127,29,64,15,22,26,5,30,79,-75,-32,-60,-23,56,77,-43,-45,1,40,37,70,-68,-21,49,-62,-39, 
  /* [8][0][][] */ -90,44,-74,95,-14,33,-31,103,108,-40,-41,54,-12,-31,15,-116,-5,-88,-99,70,15,43,-79,-74,42,84,107,-106,3,-15,-127,93, 
  /* [9][0][][] */ -36,1,-1,-26,-52,51,-30,15,-15,36,-21,48,12,-60,-10,-16,12,-95,-25,-28,60,-10,-5,23,-14,-29,20,-14,-44,26,-127,-7, 
  /* [10][0][][] */ 14,100,-28,78,63,99,-127,-81,-7,45,-5,99,34,52,-36,34,-3,-90,-94,31,-100,76,-24,-23,-8,-98,109,77,11,54,-54,63, 
  /* [11][0][][] */ 46,6,-44,-55,-13,16,-127,-23,-46,61,60,-5,59,-75,14,-48,34,-45,59,-49,58,-29,-19,72,61,5,-73,-89,27,-52,-38,32, 
  /* [12][0][][] */ -61,127,-101,67,18,-57,-85,-6,-50,-90,-32,-40,101,-73,78,120,43,-118,-85,7,11,10,11,65,53,76,27,-111,-95,102,-12,25, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 13,1,1,32 } };
const TfArray<13, float> quant3_scale = { 13, { 0.0040817642584443092, 0.0039608622901141644, 0.00351376598700881, 0.0049871602095663548, 0.0038695312105119228, 0.0056232628412544727, 0.0038595481310039759, 0.0046340227127075195, 0.0028481197077780962, 0.0064105796627700329, 0.0033697525504976511, 0.004431392066180706, 0.0028325319290161133, } };
const TfArray<13, int> quant3_zero = { 13, { 0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 103, 121, 199, -440, -246, 345, 1344, 57, -302, 246, 737, 925, 145, 185, 265, -274, -51, 1272, -371, -624, 604, -510, -257, 18, 518, -6, 280, 187, 982, 352, 1330, -25, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.0198588724015281e-05, 6.0948863392695785e-05, 5.7586941693443805e-05, 4.5961092837387696e-05, 7.1132075390778482e-05, 5.7718636526260525e-05, 0.00011029690358554944, 8.1415695603936911e-05, 9.8568772955331951e-05, 5.5965672800084576e-05, 5.6712917285040021e-05, 7.2781243943609297e-05, 7.2848248237278312e-05, 7.0877991674933583e-05, 6.186101381899789e-05, 6.8035653384868056e-05, 6.2190665630623698e-05, 9.2861191660631448e-05, 4.2588188080117106e-05, 4.698826523963362e-05, 6.6252752731088549e-05, 4.6693057811353356e-05, 4.439816257217899e-05, 0.00010731624934123829, 7.075144094415009e-05, 5.8744477428263053e-05, 7.3768023867160082e-05, 0.00012953966506756842, 7.1023983764462173e-05, 5.9900983615079895e-05, 0.00012739829253405333, 6.1507067584898323e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -30,-54,94,23,86,-1,-49,-78,33,-84,-96,15,53,-3,-42,58,-36,-28,-30,-35,-99,-77,-3,100,-40,-1,66,-36,103,-7,-3,-63,63,-48,-75,51,-89,-43,-67,44,69,-55,-66,91,47,-127,87,-3,49,-66,-26,93,-51,-37,-63,107,2,67,118,-84,-58,75,-35,45,-1,14,65,87,53,119,31,-101,91,-64,45,80,-86,1,-94,33,52,29,90,-21,-36,-33,-63,97,-32,-2,-2,-90,4,55,65,32, 
  /* [1][0][][] */ -66,55,-41,-14,-14,62,35,5,61,-93,-70,56,49,-82,26,65,90,-19,-23,119,-14,-24,60,39,-10,-30,-17,89,29,21,84,-39,30,76,24,1,49,-3,-41,-31,-56,15,-52,-57,-20,74,-67,-32,-16,-106,80,47,26,70,-114,-35,-57,84,52,70,-26,93,-58,-48,-35,36,77,38,82,5,-53,-17,-92,18,-24,47,70,20,-53,65,-55,50,-127,-68,25,105,-63,-29,58,3,66,25,65,60,10,-39, 
  /* [2][0][][] */ 22,18,-50,82,-19,-49,64,72,-100,87,-28,87,63,34,55,-91,-49,-23,91,43,-79,-3,88,10,89,101,71,2,-53,52,58,67,-51,-20,-62,-73,-67,127,96,-26,-77,-61,79,-10,-68,56,29,-57,73,71,77,-69,-34,41,30,9,-11,66,-26,-3,-19,38,-9,53,68,29,30,59,-75,74,29,-36,20,5,18,19,-47,-25,11,-1,32,-72,99,29,-6,-82,20,-36,89,78,-17,1,-27,-85,48,-23, 
  /* [3][0][][] */ 64,-4,24,-29,-65,48,-104,30,41,18,55,3,80,64,59,4,98,94,-67,17,92,-105,-57,-107,-18,-111,-83,97,38,-101,80,7,-63,-36,-25,-21,-92,-33,22,47,-24,-86,-69,-2,70,15,-63,-83,66,-80,38,-2,89,24,77,-93,-127,-108,-116,-57,-93,32,-42,71,50,-35,-63,-33,-35,-52,-21,90,11,-105,45,-53,27,94,80,-76,-95,-113,67,120,23,39,-47,-117,-94,25,-13,-104,83,-101,-66,24, 
  /* [4][0][][] */ 28,56,-5,29,-19,-18,18,12,29,52,-6,32,13,-46,-11,-42,-18,-3,-64,7,56,-60,51,13,-65,-5,36,-40,-33,17,-41,-35,39,65,7,-67,-34,-4,-68,28,-30,-40,-49,-57,17,60,17,31,15,-39,-14,-51,-55,23,-51,10,13,-59,15,6,1,-48,-28,-40,-32,29,-2,-26,12,-75,-97,-51,-35,13,59,28,32,-16,-16,-41,-1,-31,-73,-45,-3,37,47,-1,-127,-82,20,24,16,54,-86,-16, 
  /* [5][0][][] */ 68,-61,55,55,37,-87,17,69,96,-124,7,-73,11,65,41,23,47,59,-65,79,71,40,53,-31,-71,-63,-12,-67,41,28,9,-73,-39,-5,-40,11,-86,-40,76,17,-60,-53,21,74,-29,27,-4,-50,-66,68,20,16,28,10,15,-38,127,40,-38,-36,31,-46,54,-57,-29,77,-12,17,58,-6,105,-19,-53,41,-27,-50,11,-27,74,60,79,15,-78,120,-77,51,-10,27,85,-25,78,63,13,12,84,-97, 
  /* [6][0][][] */ 41,17,52,32,9,-22,25,34,53,34,43,-37,47,53,62,-38,13,17,36,52,22,-14,81,34,58,41,1,-11,3,-27,56,-28,0,-24,22,-32,5,40,-25,33,91,38,63,3,-27,65,25,-20,-16,43,10,-25,47,-16,49,1,32,-1,0,59,-40,4,37,15,-9,48,43,-9,41,-9,31,38,32,15,-26,-3,-29,-22,27,-6,29,-6,127,35,-23,-20,26,-36,112,70,46,18,4,-27,91,2, 
  /* [7][0][][] */ 30,47,-12,-19,-34,61,-29,-4,118,-12,-46,15,39,-45,38,30,26,9,-32,64,83,8,14,51,-127,35,20,40,-51,67,-38,20,45,13,32,61,-38,37,18,-19,48,-56,29,45,39,-24,57,-70,24,-72,-48,-33,-6,54,-30,3,60,-45,16,-31,8,3,38,-81,-36,-18,13,8,-55,4,53,74,52,4,24,34,-28,37,-15,31,66,-32,-79,0,34,18,-51,55,14,10,38,46,-32,-20,37,-76, 
  /* [8][0][][] */ 2,11,-25,-52,25,2,-40,-10,22,3,17,34,-5,-23,-37,-43,-41,37,-94,-7,34,-24,33,44,-67,26,10,27,-45,5,-51,42,51,-23,8,-1,44,-11,-16,20,37,31,-55,-56,-10,-9,-17,30,-1,-52,-34,-7,-35,-9,-18,-64,52,38,-53,40,42,13,-5,38,-26,-24,-23,34,-48,5,48,9,25,4,-6,2,-27,37,74,27,11,25,-127,-4,-2,8,23,-25,41,3,-52,40,-27,-48,12,28, 
  /* [9][0][][] */ -23,30,106,46,80,-65,-34,-119,44,-9,5,38,-18,-86,-77,-15,22,9,-122,-78,19,48,-126,-77,78,-60,0,38,1,-25,-83,90,54,7,-30,12,-41,-28,14,-40,18,-52,-17,-55,67,-15,-127,46,15,-45,-66,-14,69,-43,-59,60,126,-34,-14,3,-44,100,82,-92,-54,22,73,43,-17,68,73,-80,11,25,-82,-57,-38,-88,-20,91,49,26,-22,20,-30,-72,-5,-3,83,55,-16,102,74,14,8,-78, 
  /* [10][0][][] */ -58,79,82,-48,18,87,115,15,18,26,32,-49,86,77,-28,17,-17,66,-36,-33,-20,53,29,-30,100,61,-82,-71,-9,76,-56,-53,89,85,127,77,-16,37,-19,29,-3,101,-65,-20,-78,-82,17,-33,-3,25,48,22,68,29,-57,-16,-41,-3,35,-24,9,70,70,56,106,-46,-65,-8,25,-27,-16,-42,72,63,-58,93,2,89,87,34,73,7,11,86,-63,67,75,-15,81,33,0,-40,-35,-40,19,-26, 
  /* [11][0][][] */ 45,-11,5,86,50,45,22,44,76,48,10,88,14,-58,56,-41,-13,-33,12,44,51,62,32,-77,-127,-68,12,56,52,9,-4,12,-38,-34,32,56,-17,34,53,-20,-4,44,-63,17,-15,-71,-89,-40,68,30,93,36,-54,-35,16,11,-14,-12,-17,-55,-25,73,92,-14,36,61,-5,26,75,55,-61,17,35,27,-52,41,-21,0,-16,64,-47,-10,-68,-40,20,-48,-1,-4,-85,-8,15,-50,-32,-1,-71,-43, 
  /* [12][0][][] */ 23,59,-19,10,71,20,-2,-11,-75,19,-10,11,-21,-18,19,-41,-45,-10,-56,-46,-15,-12,-10,68,-24,-60,65,-43,76,21,-2,79,-33,-28,-9,29,12,-73,-30,32,65,37,-82,-15,-2,-73,-53,79,-23,-69,-31,77,34,16,-45,62,2,-23,40,41,48,80,7,45,81,32,-32,77,45,43,-31,15,59,38,-17,9,-6,55,-127,-41,-25,75,4,20,-11,33,22,71,-65,-121,58,36,48,-8,28,16, 
  /* [13][0][][] */ 121,-90,74,90,43,84,54,63,33,-64,28,35,66,51,45,-17,-60,-39,-60,-1,21,-18,57,-37,-56,15,9,9,-72,-74,69,36,19,72,-49,33,-61,-16,31,62,-45,65,-19,16,-13,35,13,6,47,59,-16,-54,-67,21,127,-33,-35,30,-20,-22,-4,79,-53,18,-19,-47,-45,65,-15,49,44,-1,-39,12,-22,-26,-55,-17,35,-16,41,-28,91,-3,-27,-67,66,91,-53,-54,-31,41,66,-3,43,35, 
  /* [14][0][][] */ -24,-64,70,55,67,-10,-6,-68,-50,-40,53,64,-13,-67,-51,-60,-30,-33,-23,16,-22,12,-10,47,-96,-64,-19,31,-80,-76,-69,35,85,-8,-32,18,75,65,23,-70,-4,-74,-4,71,58,-83,33,-60,91,-13,64,46,67,-1,2,9,-15,13,18,73,-3,-47,-18,30,-56,1,56,-67,-54,-68,-86,66,10,29,36,-44,48,-75,39,29,39,-6,-127,-27,-80,-60,-98,78,56,2,65,-28,61,79,-48,49, 
  /* [15][0][][] */ 2,-22,-25,37,52,-60,34,-55,44,-14,-47,0,64,8,-59,-73,49,4,-81,7,37,14,43,62,-6,32,27,53,-5,32,38,-68,-8,0,-55,-19,-47,50,100,-46,0,66,-55,-17,14,-38,-34,-63,-7,-78,-8,9,-68,-71,-34,-10,21,29,-31,63,-33,-45,16,62,-28,57,-53,-3,-44,-5,65,-47,12,-35,37,-76,-6,19,95,46,-56,29,-127,-59,-82,-34,-66,20,48,73,-71,-30,27,72,-90,59, 
  /* [16][0][][] */ -54,21,72,-60,45,77,-36,40,52,-24,-62,29,-9,-65,-34,-30,81,67,-8,48,99,23,-12,44,-23,-11,-36,46,-65,17,31,10,-95,52,31,19,-25,-6,-30,-42,-3,-35,-1,69,40,127,25,-12,-32,-102,3,77,-21,81,19,13,8,70,50,19,90,82,20,30,37,15,-21,65,32,37,-37,-10,8,13,50,64,0,84,-51,-6,9,-73,-78,5,5,74,49,12,59,6,-24,82,37,-28,-119,-46, 
  /* [17][0][][] */ 50,-41,14,33,25,-70,-8,17,48,7,97,6,51,71,-41,21,0,39,90,58,-4,14,45,-25,73,99,-35,6,54,-16,31,24,-7,-3,52,5,-30,79,0,-29,17,-19,66,-9,-6,65,97,-65,41,84,15,-4,12,22,63,-35,-8,34,-11,-57,3,-53,26,87,-43,-31,23,-49,-56,-15,127,67,15,-5,-15,31,43,-27,96,-24,16,-14,46,-17,-57,26,89,-30,90,101,-43,-55,14,39,52,18, 
  /* [18][0][][] */ -108,94,101,-80,-17,-118,-111,0,-12,70,-114,-56,-45,40,50,-64,13,-31,81,-35,86,-54,14,-88,72,-101,-26,104,19,26,-5,35,37,-36,-120,-117,-40,50,-42,54,-47,-4,-54,-16,-123,11,23,-4,11,-42,63,27,-117,-17,-12,78,-55,26,-12,-124,77,102,3,30,-78,-127,-41,82,60,-95,-83,101,-104,-25,-95,-112,47,32,-8,-83,-64,-15,-16,-72,98,-43,66,60,-89,-5,-64,99,81,-62,32,49, 
  /* [19][0][][] */ 27,14,64,32,51,-79,86,73,70,-63,27,-2,-89,30,-58,50,63,-96,69,42,-50,74,-55,10,116,-82,16,-68,-94,-122,-53,40,70,-73,16,-7,2,-75,-72,-94,36,-103,-85,3,-80,13,102,-86,-20,9,-36,35,-41,12,-7,-3,1,83,-1,-23,42,-54,67,58,-67,-9,-33,-4,-13,36,20,-62,-62,-115,-59,-84,-26,-127,-32,85,47,-96,-39,32,-77,-12,11,-10,27,-34,-11,54,-27,100,43,-73, 
  /* [20][0][][] */ -15,59,62,77,-48,76,15,36,25,14,-42,19,10,86,36,-38,-19,-15,-38,-15,23,-27,-50,-38,68,-33,-55,47,22,22,-26,89,87,43,-10,58,45,-3,17,-67,-51,-11,-61,-52,-6,-43,-39,85,29,-60,-48,41,38,89,28,11,91,59,64,67,87,-19,-27,-26,-3,-28,-30,22,-40,-56,-30,63,-19,-30,32,23,86,46,68,85,71,20,49,-59,56,87,-4,58,-1,127,36,56,4,31,-46,7, 
  /* [21][0][][] */ 57,64,58,-104,85,-78,59,10,-35,-73,-72,34,-4,0,-57,-91,-101,-33,12,-21,59,-76,53,-79,1,-108,-36,60,3,-4,-17,-28,5,8,-105,-112,99,61,-117,-36,-18,-2,-18,-19,-93,-92,-84,77,-24,-104,-10,74,27,58,-126,11,-75,41,-52,104,44,-75,-10,-24,66,21,-40,-73,-106,-27,22,52,20,-62,57,53,-110,-41,6,87,5,84,-17,-87,14,-93,50,-82,-127,34,79,-109,-55,-78,-6,-54, 
  /* [22][0][][] */ 27,-59,-76,-99,81,-59,100,58,-104,79,-79,-108,105,-127,-117,-89,32,77,-118,-64,79,-75,25,25,55,-8,-117,92,-62,-81,-68,-112,42,54,12,7,-3,-21,-52,-117,-4,-18,-7,87,49,-116,79,-26,-66,-90,0,-23,-68,-95,-50,28,-17,-35,-26,-35,100,-79,-79,-116,-70,13,-115,-50,103,91,-41,-8,-70,-1,58,-94,37,-53,52,85,98,-101,-93,-118,71,74,88,-37,-101,14,-73,53,14,13,-44,96, 
  /* [23][0][][] */ 25,-40,-3,20,38,-49,1,-43,7,29,33,25,1,-51,2,-18,32,-14,19,39,43,-39,40,-17,31,51,30,4,24,14,30,-20,-22,13,2,11,35,26,-46,-1,-35,-1,26,-48,-31,-36,40,8,31,38,-30,-24,30,-30,-11,28,-11,-12,36,14,-50,-42,-23,-3,11,10,-49,-48,20,-12,41,-23,-8,43,-19,-41,14,-14,41,39,-23,-24,127,-15,33,-2,43,-15,-19,26,36,-8,57,-32,61,54, 
  /* [24][0][][] */ -76,-12,-50,-38,-32,-60,-19,-71,37,27,64,36,83,18,-19,-55,-34,34,-27,-9,57,-53,-20,0,-4,-57,56,50,84,46,13,-25,11,15,41,23,-19,-67,39,-3,-51,-47,22,14,12,-12,4,56,-61,-55,-4,18,62,53,11,-31,-53,62,31,16,71,12,6,69,-47,70,-12,-42,-53,19,-60,-24,-14,-22,74,73,54,-27,-58,-35,-38,-53,-127,-107,17,56,-12,-50,-10,-74,8,-35,-23,19,-87,2, 
  /* [25][0][][] */ -106,-41,-52,-1,56,-50,-86,49,66,-82,-19,35,70,-26,-57,-12,-49,47,0,-59,87,51,17,-35,-107,-53,-59,37,39,-60,5,89,80,-74,20,51,91,-36,9,5,-75,65,-106,14,87,21,49,31,-61,35,-46,7,38,-5,-69,6,-79,46,-63,65,91,36,44,19,15,64,-8,-2,-57,9,-43,-65,39,-85,66,15,56,25,62,23,46,27,-127,33,-58,-31,-79,-50,-112,-41,73,28,-102,-2,-73,-85, 
  /* [26][0][][] */ 41,-70,3,11,-61,11,-5,-12,-51,-99,74,74,-32,-39,24,7,81,26,-85,-32,9,45,70,17,-97,-11,22,38,9,12,-42,16,-13,-23,-73,-50,-29,19,-16,74,-62,71,-27,31,-31,69,-47,79,-12,-14,-1,68,13,-13,6,-47,21,50,32,29,16,-41,46,-3,78,-3,-14,47,-37,68,7,49,62,-96,-32,14,41,-116,-87,21,-6,60,-7,-94,62,13,-26,26,-127,34,26,22,-24,89,-20,54, 
  /* [27][0][][] */ 24,0,-21,-24,-43,-20,-13,15,12,58,30,-19,-8,21,25,0,22,8,42,-25,-43,3,14,-12,4,48,-34,-1,20,5,17,-3,5,27,-30,-33,-30,-6,-28,39,-6,24,68,8,40,31,34,38,51,39,28,-17,-24,-32,23,-4,38,-7,-31,-13,-21,-22,-1,39,15,-16,-33,39,19,26,-27,25,28,33,7,-23,14,-31,32,33,32,-2,127,-5,-17,-23,14,19,12,-6,-6,-16,28,7,57,29, 
  /* [28][0][][] */ 91,-4,74,51,-75,-16,-28,-26,-8,-46,68,76,-19,-54,22,92,83,76,-63,53,-25,18,-31,-21,-74,56,-25,-21,-31,-35,27,13,-75,32,57,31,17,-59,-4,55,83,47,-36,55,-50,46,6,51,39,-62,-64,-4,-29,32,79,54,26,22,65,69,22,-2,-51,19,50,58,13,76,-28,50,-34,7,72,24,38,-39,-46,-74,20,52,-31,-33,127,-24,67,-52,54,-25,-109,-65,-1,-15,-32,49,-40,-11, 
  /* [29][0][][] */ 28,39,46,-42,-64,7,-89,8,76,-12,-56,-69,81,-70,-14,-23,-66,74,18,-28,-34,-17,35,12,-73,5,-17,-19,-67,2,80,3,30,0,-55,-37,-9,72,-7,66,26,78,-58,62,-7,125,-52,-8,-14,1,44,-72,49,-66,60,35,-105,44,-61,84,-77,75,-78,-29,-40,-47,69,70,70,-70,47,-69,75,37,59,18,87,-52,-15,29,-6,-54,-79,-103,50,94,11,64,-10,127,63,57,-70,28,-74,65, 
  /* [30][0][][] */ 50,-18,-20,16,78,-1,18,24,19,79,43,-19,-32,58,24,16,-9,54,84,-27,14,-15,20,3,62,87,-21,36,22,-34,70,-3,-30,-11,5,-9,-12,66,23,3,102,6,83,25,23,9,101,29,-8,69,64,-44,54,-27,26,51,18,-20,-8,-11,-46,-10,-28,101,-22,-33,-18,35,-20,33,48,28,-29,127,31,-28,-27,-15,-5,-27,22,16,50,-16,-21,11,44,23,32,-20,32,11,8,-13,65,-8, 
  /* [31][0][][] */ 77,-57,26,63,44,45,-31,-49,-22,-22,-41,-74,69,-127,-32,93,-32,-46,-4,45,42,9,27,76,-17,-105,32,30,-46,-52,57,82,-18,16,-60,-33,61,-42,-42,-63,44,-43,-36,27,1,27,-52,15,74,17,57,-26,-74,-39,-58,15,-93,60,22,89,-17,5,68,-37,46,79,-17,-50,55,-90,-127,17,-75,-44,14,8,-34,-62,85,65,-59,-41,-35,39,42,71,-55,18,-37,-90,-70,-39,28,62,-23,-28, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021334399934858084, 0.0025903265923261642, 0.0024474449455738068, 0.0019533464219421148, 0.0030231131240725517, 0.0024530419614166021, 0.0046876184642314911, 0.0034601669758558273, 0.0041891727596521378, 0.0023785410448908806, 0.0024102989118546247, 0.0030932028312236071, 0.0030960505828261375, 0.0030123146716505289, 0.0026290928944945335, 0.0028915151488035917, 0.0026431032456457615, 0.0039466004818677902, 0.0018099979497492313, 0.0019970012363046408, 0.0028157420456409454, 0.0019844549242407084, 0.0018869219347834587, 0.004560940433293581, 0.0030069360509514809, 0.0024966401979327202, 0.003135140985250473, 0.0055054356344044209, 0.0030185193754732609, 0.0025457916781306267, 0.0054144272580742836, 0.0026140501722693443, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1175, -36, 2259, 2711, 1799, -1255, 1887, -566, -922, -3, 2300, -910, 1383, 3059, 1152, 935, -432, -170, -319, 2592, 1270, -214, 1411, -387, 61, 2115, 642, 1238, 3013, 1339, 1772, 845, 705, 2603, 2076, 1536, -302, 2292, 1295, -1914, -164, 638, 691, 1219, -812, 352, -349, 368, -2932, 1680, 626, -1643, 3620, -550, 1160, 634, 558, 1519, -356, -967, 243, 1192, 215, 2104, 2668, 1990, 1544, 2969, 2288, -311, 1568, 3026, 1634, -1083, 2410, 4270, 662, -1651, 624, 907, 3408, 895, 444, -1063, 653, 305, 984, -1161, 2672, 285, 2441, 526, -75, -1945, 276, 641, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00025977467885240912, 0.00052830722415819764, 0.00027965451590716839, 0.00030459387926384807, 0.00033206495572812855, 0.00027822997071780264, 0.00033043129951693118, 0.00035771218244917691, 0.00035952683538198471, 0.00052228529239073396, 0.00027916536782868207, 0.00043140511843375862, 0.00042529232450760901, 0.00023776266607455909, 0.00028089212719351053, 0.00039989536162465811, 0.00038019739440642297, 0.00050365290371701121, 0.00033520456054247916, 0.00024302864039782435, 0.00034950804547406733, 0.00037785098538734019, 0.00027128373039886355, 0.00038904557004570961, 0.00062265875749289989, 0.00036780777736566961, 0.000359703553840518, 0.00028342450968921185, 0.00024693069281056523, 0.00031284338911063969, 0.0003246492997277528, 0.00030832705670036376, 0.00045368651626631618, 0.00024533821851946414, 0.00033284601522609591, 0.00034546267124824226, 0.00035143655259162188, 0.00025298271793872118, 0.00033568305661901832, 0.000278854975476861, 0.00034805215545929968, 0.0003508213849272579, 0.00042926307651214302, 0.00024363974807783961, 0.00032894985633902252, 0.00040929624810814857, 0.00040817199624143541, 0.00039748972631059587, 0.00023974424402695149, 0.00029171269852668047, 0.00041542752296663821, 0.00027755420887842774, 0.00021397667296696454, 0.00025671528419479728, 0.00041548904846422374, 0.00038838820182718337, 0.00042284213122911751, 0.00027901484281755984, 0.00039067550096660852, 0.00028998666675761342, 0.00034884503111243248, 0.00022429099772125483, 0.00058556959265843034, 0.00033158360747620463, 0.00026120824622921646, 0.00023668755602557212, 0.00026578732649795711, 0.00024937285343185067, 0.00029077313956804574, 0.00041471890290267766, 0.00038557211519218981, 0.00023855685140006244, 0.00030305981636047363, 0.00023252566461451352, 0.0002895625657401979, 0.0001953452592715621, 0.00022437825100496411, 0.00035255815600976348, 0.00044562062248587608, 0.00027894770028069615, 0.00026064805570058525, 0.00030159077141433954, 0.00051946175517514348, 0.00036790309241041541, 0.0003305159043520689, 0.00045342458179220557, 0.00032350860419683158, 0.00029528405866585672, 0.00032653112430125475, 0.0004540302325040102, 0.00025789847131818533, 0.00044159017852507532, 0.00032078567892313004, 0.00020563052385114133, 0.00048120060819201171, 0.00041304028127342463, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 11,90,-127,6,63,-27,116,116,-86,-22,65,-74,103,114,-80,50, 
  /* [1][0][][] */ -27,-5,-37,-13,-4,64,15,-127,28,-40,-21,-50,6,-44,-58,6, 
  /* [2][0][][] */ -10,-31,18,71,24,45,-103,127,-32,-6,87,-46,-17,-79,-54,85, 
  /* [3][0][][] */ 111,-104,75,-23,-24,-26,-27,127,-42,55,81,64,-3,54,-5,19, 
  /* [4][0][][] */ -26,-11,8,45,-88,15,-35,-127,1,-6,21,-16,27,51,81,82, 
  /* [5][0][][] */ 120,11,-29,-31,-73,27,33,60,3,-20,78,105,127,14,-77,16, 
  /* [6][0][][] */ 27,-34,-47,-52,-82,22,-15,-61,-57,-46,-29,34,110,54,127,-10, 
  /* [7][0][][] */ -63,29,-30,-82,-13,-55,-89,9,-107,62,-73,-67,-127,-37,25,94, 
  /* [8][0][][] */ 45,39,63,3,40,20,67,-3,62,-39,43,9,-127,-33,-73,14, 
  /* [9][0][][] */ -58,52,44,-57,-28,-4,37,-36,-38,41,-33,22,48,127,1,42, 
  /* [10][0][][] */ 69,58,-38,67,-34,-18,42,-47,-56,-30,-66,-117,-127,-63,20,90, 
  /* [11][0][][] */ 39,-6,58,-5,-22,-15,12,109,-71,15,-20,12,-15,-10,49,127, 
  /* [12][0][][] */ -62,-25,14,0,16,-9,127,-5,-58,12,7,-11,-18,65,-28,94, 
  /* [13][0][][] */ 15,-4,16,59,102,57,127,116,-33,62,-70,-58,58,57,-110,-4, 
  /* [14][0][][] */ -99,123,-2,-28,-8,9,62,23,-52,36,127,-4,-79,23,-61,51, 
  /* [15][0][][] */ -21,-14,-127,-34,73,-55,-79,-44,-24,-21,-18,-68,-13,-68,-33,34, 
  /* [16][0][][] */ 91,-9,9,-17,36,-42,47,-45,-39,-3,127,43,15,3,-50,7, 
  /* [17][0][][] */ -1,19,-12,-75,0,-48,93,-127,6,-21,-42,22,16,66,9,39, 
  /* [18][0][][] */ 30,118,-19,-54,70,-65,-31,-66,-55,127,-11,4,-25,63,-24,-12, 
  /* [19][0][][] */ -85,-120,127,-97,27,-126,35,-78,47,18,94,104,13,-11,62,-38, 
  /* [20][0][][] */ -6,79,56,-9,-8,9,29,-30,61,-24,103,-23,-127,-41,-94,4, 
  /* [21][0][][] */ -51,46,20,6,55,37,54,53,-127,62,-37,24,-29,18,-56,-21, 
  /* [22][0][][] */ 15,-97,53,10,31,-127,119,-25,10,-69,-42,-82,55,-93,-55,-55, 
  /* [23][0][][] */ -75,-107,36,82,45,-30,33,-68,18,-52,89,-6,8,85,101,127, 
  /* [24][0][][] */ 22,-15,-2,43,49,32,-61,-127,49,15,-18,30,37,-27,-12,-1, 
  /* [25][0][][] */ -16,18,10,-64,-33,-2,-4,-54,-35,52,-40,-2,43,127,13,15, 
  /* [26][0][][] */ -66,89,13,25,37,-98,-11,-43,18,28,9,73,9,9,-92,127, 
  /* [27][0][][] */ -25,-127,-36,-3,-54,100,0,-72,16,-31,61,-29,26,-53,-107,-15, 
  /* [28][0][][] */ -21,-5,33,69,7,5,-35,-127,-120,45,101,-7,79,5,-50,-22, 
  /* [29][0][][] */ -124,106,5,-19,-28,35,-127,-99,-41,-30,-5,-7,14,-63,-113,57, 
  /* [30][0][][] */ 46,63,-67,68,-83,-111,-58,-40,-47,-13,15,-101,127,18,-5,88, 
  /* [31][0][][] */ 127,13,-66,-47,-82,25,105,52,-52,-15,70,64,51,13,-32,25, 
  /* [32][0][][] */ -30,-36,127,-9,-23,93,97,55,-10,-18,-2,35,18,64,71,62, 
  /* [33][0][][] */ -18,21,-91,-42,11,37,122,-1,-21,-26,38,-64,124,127,-52,61, 
  /* [34][0][][] */ -103,-38,100,15,23,-31,108,-40,-127,4,46,-32,54,45,-60,-18, 
  /* [35][0][][] */ -4,-1,-38,2,-95,127,-16,-37,-27,102,10,96,-51,51,3,46, 
  /* [36][0][][] */ -24,-77,127,-44,-53,23,-36,-22,18,17,-48,74,2,-80,-37,47, 
  /* [37][0][][] */ 73,-2,63,-31,103,-60,-56,28,-52,127,-65,-1,-80,-35,88,-21, 
  /* [38][0][][] */ 49,65,49,-104,-4,-53,-116,50,-71,69,-116,-66,-95,-115,-127,53, 
  /* [39][0][][] */ -72,26,-67,-28,-65,-82,70,33,-127,-29,18,77,34,0,11,48, 
  /* [40][0][][] */ 104,32,53,-97,-97,56,-3,-127,-48,-49,-61,-112,19,71,40,43, 
  /* [41][0][][] */ 88,-71,-67,-52,7,-5,-53,-3,58,-15,5,-53,127,-74,62,-25, 
  /* [42][0][][] */ -26,-88,-46,125,5,-83,-127,33,11,6,14,54,-85,78,-79,-6, 
  /* [43][0][][] */ -78,-33,-51,-127,-50,-11,6,67,28,-112,-28,41,-25,-52,-27,89, 
  /* [44][0][][] */ -48,41,41,-46,-53,-38,34,124,127,-78,69,101,103,59,-38,-2, 
  /* [45][0][][] */ 12,60,-87,69,127,-80,-16,-41,85,-77,78,-51,-24,-14,-69,63, 
  /* [46][0][][] */ -21,-39,14,-3,107,-9,26,28,-11,126,-29,-127,39,72,-66,74, 
  /* [47][0][][] */ 82,-46,-43,-11,84,-9,-41,-33,-8,127,-25,36,9,-108,-71,21, 
  /* [48][0][][] */ 15,33,-18,-125,-9,-63,127,-80,13,9,-43,44,36,69,6,34, 
  /* [49][0][][] */ -4,127,-111,5,70,-22,56,64,-45,12,59,-64,3,43,105,-55, 
  /* [50][0][][] */ 14,45,-26,6,-127,-11,-69,-68,55,75,29,29,-38,-39,9,32, 
  /* [51][0][][] */ 127,-51,-46,-24,-44,97,-90,-52,36,-21,-33,77,-22,-76,-14,48, 
  /* [52][0][][] */ -46,-64,51,72,-44,-81,-127,-57,-51,-62,-26,-64,38,-82,0,95, 
  /* [53][0][][] */ 7,90,62,-99,-2,126,90,-40,-3,-42,-6,-37,88,-127,-8,65, 
  /* [54][0][][] */ 30,102,-7,-30,-3,-65,-79,88,3,-30,-28,127,77,66,13,71, 
  /* [55][0][][] */ -19,-20,44,23,39,-28,81,53,-84,-7,18,17,127,42,-22,0, 
  /* [56][0][][] */ 115,5,17,4,-52,127,-28,-51,-32,16,-58,27,-57,76,-35,53, 
  /* [57][0][][] */ -49,-39,-73,-53,-56,-104,84,-26,-127,-40,79,74,7,30,-3,65, 
  /* [58][0][][] */ 63,-68,55,19,7,-57,-20,1,12,-22,-127,-17,39,-45,-45,55, 
  /* [59][0][][] */ 59,7,-127,86,23,44,91,-40,-65,-62,37,-96,-109,-70,27,120, 
  /* [60][0][][] */ 2,15,-13,14,-10,-11,-16,11,-38,-62,62,119,-31,-127,-34,6, 
  /* [61][0][][] */ -11,0,70,-79,-55,54,17,92,-29,-97,70,87,74,-22,11,127, 
  /* [62][0][][] */ 83,41,-1,-127,-31,7,9,-41,-8,21,-33,45,17,-22,-94,-67, 
  /* [63][0][][] */ 7,-28,-4,-5,-49,-58,-60,4,-72,-14,-30,-12,127,0,49,-10, 
  /* [64][0][][] */ 59,-4,-32,42,-98,-41,-20,-79,39,127,52,13,64,-62,-45,125, 
  /* [65][0][][] */ -26,6,-20,-32,-81,50,35,-54,37,-127,103,-57,56,59,-126,56, 
  /* [66][0][][] */ -127,69,-65,-66,31,-23,-85,-105,-77,70,79,2,-98,-50,21,44, 
  /* [67][0][][] */ 15,-31,-127,-100,55,48,9,-15,-30,-6,48,-9,23,28,17,48, 
  /* [68][0][][] */ 52,20,-21,-36,-58,8,2,-7,-74,57,127,-11,-8,-41,-106,-14, 
  /* [69][0][][] */ 96,-105,36,-46,11,-105,-23,127,-10,62,84,82,-17,69,-22,1, 
  /* [70][0][][] */ 18,17,127,30,73,22,93,44,34,-2,-44,39,-65,45,-80,39, 
  /* [71][0][][] */ -4,22,104,-78,-127,-61,16,2,-32,-21,27,-97,-66,-2,6,38, 
  /* [72][0][][] */ -59,-100,31,-125,62,-5,19,74,-67,14,-124,-15,55,117,-50,127, 
  /* [73][0][][] */ 13,22,62,6,127,-102,-56,-2,-23,94,-109,25,-113,-49,122,-34, 
  /* [74][0][][] */ -126,-7,-121,-60,70,-50,-20,15,-72,6,-127,-40,-39,-64,-32,81, 
  /* [75][0][][] */ 77,-41,64,-51,24,20,-127,-55,-20,-111,87,13,14,-29,-14,1, 
  /* [76][0][][] */ 3,-60,-39,75,27,95,77,-43,70,-102,77,127,45,-97,-60,55, 
  /* [77][0][][] */ -40,-47,127,-23,7,-17,-21,-112,11,9,39,92,55,40,3,13, 
  /* [78][0][][] */ -25,11,-7,-42,16,-52,35,27,33,-13,17,-84,-96,-60,-127,-46, 
  /* [79][0][][] */ -111,-113,-44,-16,127,51,-4,23,-3,11,4,103,-50,-119,-104,6, 
  /* [80][0][][] */ -3,-90,69,127,-70,-11,-92,107,6,28,55,-9,-89,4,-25,68, 
  /* [81][0][][] */ 103,53,-5,74,-16,55,14,103,13,10,111,55,127,25,43,-15, 
  /* [82][0][][] */ -51,-42,18,-57,0,-109,-127,-100,4,60,-21,-19,-2,54,-85,-8, 
  /* [83][0][][] */ 122,-26,86,-33,-62,0,-111,-14,12,-127,23,-38,-8,-14,-1,-18, 
  /* [84][0][][] */ 8,-64,-86,14,127,34,42,39,-93,25,-90,-20,43,-43,-55,21, 
  /* [85][0][][] */ -24,67,29,-34,84,10,40,-127,100,-42,40,-10,83,-79,4,5, 
  /* [86][0][][] */ 117,-28,127,59,0,-56,70,44,-54,-49,-105,-54,32,29,-58,4, 
  /* [87][0][][] */ 8,-5,5,-75,58,-15,-37,30,23,-35,75,-20,-63,-127,-16,31, 
  /* [88][0][][] */ -80,-43,39,-25,20,59,-59,-77,-6,-20,-62,-127,-37,-71,-47,0, 
  /* [89][0][][] */ -71,27,-1,-94,73,35,-127,68,105,21,-76,-1,-16,-111,-65,-11, 
  /* [90][0][][] */ -21,-31,-33,-108,127,34,-56,17,44,56,47,-8,47,6,-106,-14, 
  /* [91][0][][] */ -43,-51,18,43,-34,11,-10,63,-16,-67,29,-36,-11,46,-6,127, 
  /* [92][0][][] */ -12,78,-17,-10,-18,59,-97,54,-40,-11,68,7,-32,127,51,24, 
  /* [93][0][][] */ -1,75,-79,-88,93,76,-77,16,57,68,90,66,-127,18,-32,88, 
  /* [94][0][][] */ 14,54,127,9,-124,-16,11,-49,19,-21,29,-14,-30,-23,8,-23, 
  /* [95][0][][] */ -13,-11,-2,-10,127,5,-75,87,10,-11,-48,110,41,-26,88,2, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0018749540904536843, 0.0038131189066916704, 0.0020184391178190708, 0.0021984418854117393, 0.0023967174347490072, 0.0020081573165953159, 0.002384926425293088, 0.0025818294379860163, 0.0025949268601834774, 0.003769654780626297, 0.0020149084739387035, 0.0031137166079133749, 0.0030695968307554722, 0.0017160797724500299, 0.0020273716654628515, 0.0028862913604825735, 0.0027441189158707857, 0.0036351736634969711, 0.0024193779099732637, 0.0017540875123813748, 0.0025226150173693895, 0.0027271835133433342, 0.0019580218940973282, 0.002807981800287962, 0.0044941119849681854, 0.0026546954177320004, 0.0025962023064494133, 0.0020456493366509676, 0.0017822509398683906, 0.0022579836659133434, 0.002343194093555212, 0.0022253864444792271, 0.0032745352946221828, 0.0017707572551444173, 0.0024023549631237984, 0.0024934171233326197, 0.0025365343317389488, 0.0018259321805089712, 0.0024228314869105816, 0.002012668177485466, 0.0025121069047600031, 0.0025320942513644695, 0.0030982561875134706, 0.0017584982560947537, 0.0023742339108139277, 0.0029541433323174715, 0.0029460289515554905, 0.0028689284808933735, 0.0017303819768130779, 0.0021054702810943127, 0.0029983965214341879, 0.002003279747441411, 0.0015444015152752399, 0.0018528724322095513, 0.0029988405294716358, 0.0028032371774315834, 0.0030519124120473862, 0.0020138220861554146, 0.002819746034219861, 0.0020930124446749687, 0.0025178296491503716, 0.0016188464360311627, 0.004226416815072298, 0.0023932433687150478, 0.0018853009678423405, 0.0017083199927583337, 0.0019183509284630418, 0.0017998776165768504, 0.0020986890885978937, 0.0029932819306850433, 0.0027829117607325315, 0.0017218118300661445, 0.0021873696241527796, 0.001678281114436686, 0.0020899516530334949, 0.00140992715023458, 0.0016194761265069246, 0.0025446296203881502, 0.0032163187861442566, 0.0020133375655859709, 0.0018812577472999692, 0.0021767665166407824, 0.0037492755800485611, 0.0026553834322839975, 0.0023855371400713921, 0.0032726447097957134, 0.0023349609691649675, 0.0021312471944838762, 0.0023567765019834042, 0.0032770161051303148, 0.0018614123109728098, 0.0031872284598648548, 0.0023153079673647881, 0.0014841622905805707, 0.003473121440038085, 0.0029811663553118706, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 14124, 19076, -7047, 279, 1649, 6552, 2058, 8036, 15340, -543, -6572, 7652, -16306, 12242, 2319, 8234, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.8196037318557501e-05, 5.7908306189347059e-05, 7.1096554165706038e-05, 6.4849933551158756e-05, 7.7310272899921983e-05, 9.3220209237188101e-05, 5.8623678341973573e-05, 8.2592297985684127e-05, 8.5528008639812469e-05, 6.9100024120416492e-05, 8.1866361142601818e-05, 6.5848820668179542e-05, 8.3729457401204854e-05, 6.3292871345765889e-05, 9.2065740318503231e-05, 6.9698260631412268e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -120,54,83,-54,-56,-32,-75,7,-54,2,-31,-46,-9,22,28,-49,3,7,108,14,11,-50,116,75,22,15,-3,30,-50,-126,-87,10,-42,-51,37,-30,-15,13,-23,6,-9,2,-77,25,-76,-21,-22,80,-15,2,-66,-18,-70,19,42,-60,-127,-3,10,73,50,11,-10,29,-37,-66,-52,33,-59,-72,13,10,54,4,-92,-59,-42,22,-33,10,-44,73,95,-74,8,62,11,58,36,-21,-14,-35,-24,-42,-72,-15, 
  /* [1][0][][] */ 34,17,28,-25,-78,-24,-27,14,-18,44,66,-71,-10,-17,-85,-40,-6,-1,-75,22,-2,-96,5,58,-10,-71,-10,-54,64,-109,126,-77,77,23,-21,74,40,67,-34,-34,31,25,-9,-38,4,61,-127,-51,-53,-58,-27,-30,49,-54,-44,50,19,-11,-36,2,32,46,-25,-108,-18,8,-53,1,23,-20,-81,-10,-71,-16,3,-71,4,2,11,-73,-41,-42,-103,-33,33,-72,-40,22,-112,-7,-64,68,17,74,-57,66, 
  /* [2][0][][] */ 59,-23,53,51,8,-64,72,0,-23,-24,-48,-8,-43,-19,-3,-42,-67,-43,-34,35,16,-59,-32,17,-11,-49,48,-24,-8,33,-34,105,-69,127,-25,36,-11,12,-20,4,-75,67,47,47,-52,2,-13,-13,45,26,-54,-25,95,-17,-18,57,46,-15,30,-18,23,32,-23,45,58,-11,-6,-2,28,58,-50,-2,19,43,79,37,27,-66,83,66,62,1,-27,28,-47,30,-3,62,22,18,-15,18,-33,28,6,39, 
  /* [3][0][][] */ -24,-19,-36,30,4,-1,6,-83,-4,89,69,59,31,1,-50,34,16,-38,28,5,15,127,24,-66,9,13,-27,1,76,-31,63,-23,-8,32,-41,-21,28,66,47,-10,-69,-29,-27,55,-14,35,22,-2,-14,-57,-9,-34,64,-102,-46,-34,38,84,-42,-15,1,-10,-43,-29,29,52,-64,-13,-10,4,15,-81,-45,-30,26,2,-1,-12,-31,-33,-14,-24,-56,23,-13,-15,20,-43,5,59,44,1,62,29,-49,49, 
  /* [4][0][][] */ 34,-7,-60,-1,29,32,-62,16,-33,76,111,-10,-9,8,10,-49,5,-7,-36,34,19,-40,55,55,-50,3,-127,25,-45,-43,-8,11,-78,-39,28,73,15,15,35,16,-35,-42,50,-66,-15,13,-22,62,-60,42,47,18,43,-7,-71,14,46,-31,9,2,32,-10,7,-1,-37,33,-25,13,-48,34,-24,55,25,-81,-50,-55,36,-39,-31,4,-37,76,-68,19,-24,4,18,-39,51,5,18,15,-47,-19,41,22, 
  /* [5][0][][] */ -89,48,79,-7,41,-22,91,-34,-52,13,-32,-39,48,-15,-45,-68,-5,-32,60,15,-105,-32,-72,18,-27,1,52,21,54,-100,-16,50,20,127,0,2,-8,51,25,-7,-20,87,74,-32,-10,70,40,8,11,24,-21,29,26,-33,34,-97,37,-61,-50,-73,54,87,-51,-4,74,-69,-77,-56,-70,6,-54,-11,2,29,-18,-47,32,-33,-28,-36,116,4,31,-63,-80,19,18,-5,-33,46,28,-11,-3,15,42,84, 
  /* [6][0][][] */ 30,-27,-104,9,-34,-101,80,92,-64,56,3,56,-125,-67,61,49,16,-67,-13,-15,-14,-39,-69,-67,-57,40,83,32,18,38,97,-29,19,5,9,-86,6,-21,20,100,21,19,-57,-11,15,-63,-74,13,12,-92,2,59,48,10,-28,-56,47,37,14,16,-85,54,-68,4,5,10,3,45,26,5,-9,-33,-52,20,88,47,60,-14,56,-87,-11,-50,-96,47,0,-74,33,21,-42,36,52,20,-39,0,-31,127, 
  /* [7][0][][] */ 15,75,-40,-127,-16,-19,7,21,-81,-9,-11,-43,-40,25,3,-10,-58,-32,-23,50,-32,110,8,-4,-25,3,41,29,54,38,60,-18,58,25,-5,-17,-9,-41,6,9,-68,-18,22,-66,-7,-28,31,-7,10,-43,-80,-38,-89,18,24,0,-10,7,-51,4,11,38,50,-7,-31,-4,-35,24,-50,-22,-78,32,52,37,-52,18,-34,86,-15,-64,-14,-39,57,-77,59,-15,-26,26,-19,73,-68,17,61,-43,-40,5, 
  /* [8][0][][] */ 0,79,-42,76,-45,-4,-73,20,-99,-26,-7,-8,-28,26,34,106,-6,-48,-2,14,48,4,11,-13,-24,77,19,37,-26,-7,-52,-25,-30,-48,-30,-39,-32,37,43,14,9,-35,20,-20,-41,-41,31,-8,-10,-24,56,80,37,-24,-70,89,-25,39,-13,-46,-49,3,-1,59,-36,-58,-36,-11,-31,17,7,-5,-42,-46,-111,-26,-51,28,-86,-44,-37,4,-43,-31,4,-28,25,35,3,76,-72,1,-92,-127,27,-46, 
  /* [9][0][][] */ -2,25,-83,29,-27,-48,56,60,20,34,-19,94,-44,-13,27,123,26,19,73,2,2,22,34,-94,-50,-1,12,-31,17,-17,39,47,-51,-10,3,-127,21,-32,-27,-46,-24,10,53,-10,-10,-7,-3,15,34,92,12,-15,-103,-82,2,6,0,-18,77,-23,-54,39,-41,-20,94,9,-39,15,-77,19,33,45,10,89,-51,-27,-38,34,-45,10,55,-47,73,-7,16,5,-29,-20,-63,13,1,-10,56,31,-58,-30, 
  /* [10][0][][] */ 53,13,-32,1,-22,-19,64,10,4,-13,-47,-6,-79,-20,1,-2,-63,-20,14,4,51,25,28,2,-22,65,27,1,-41,-59,-19,-16,61,-36,43,6,51,-66,57,100,12,-52,-2,-15,-30,-77,-8,45,34,71,-58,-35,-32,27,19,32,-1,-51,74,41,-33,46,-52,-5,-9,-47,42,50,27,-24,-6,48,127,32,32,-76,30,-44,45,-14,-35,50,34,21,-25,-37,13,25,-30,-11,22,47,31,48,-41,2, 
  /* [11][0][][] */ -46,-19,56,-104,29,-11,-20,-52,24,-64,7,8,-10,3,16,-7,-57,-3,56,0,-70,34,-49,-87,22,23,-37,41,43,-90,37,-18,10,-11,30,-68,-75,20,-127,-13,-67,47,-35,62,0,4,-27,-38,22,-6,-70,-74,-22,45,89,-84,-51,-53,38,-40,-36,-30,3,-101,-2,-97,81,69,88,24,61,-13,4,-21,58,-35,115,61,22,45,26,14,-24,52,78,16,10,12,-65,-62,7,5,69,32,66,69, 
  /* [12][0][][] */ 28,-28,-14,-31,52,113,-2,41,48,65,-2,96,4,70,46,-29,-37,58,24,35,126,-10,61,-73,29,26,-114,-66,-27,73,-11,9,58,1,16,-53,53,-5,-34,-44,14,-8,44,100,-9,41,-2,-4,-51,23,8,23,-38,-21,17,20,-33,57,15,47,9,-70,27,-118,4,74,-7,-32,8,-51,73,2,-6,22,-19,52,1,36,-48,-23,-15,33,127,5,-28,110,-37,-85,102,-15,-76,44,79,-3,-22,-105, 
  /* [13][0][][] */ -18,37,-5,-56,-33,-27,-3,-40,8,-46,-31,-51,42,-94,-32,-81,-6,-36,-83,-27,-102,-25,3,96,-48,2,111,-4,44,-18,57,44,28,-13,-126,127,-41,-61,37,-75,103,5,-10,55,16,-96,62,-32,69,-7,-71,19,17,-1,-3,88,63,-67,-37,-24,60,28,8,-92,-6,40,-17,21,-43,-46,-72,-4,-64,27,-41,-77,-109,29,56,117,-21,47,37,-87,51,39,15,1,-46,8,-1,5,-66,2,-44,-24, 
  /* [14][0][][] */ -8,4,-103,-21,75,80,-89,-15,49,-39,106,-2,7,-13,-17,-71,-46,20,33,127,-7,-37,-12,8,-16,28,-34,66,18,5,-21,7,84,-3,-55,14,-17,45,74,-6,57,8,23,22,6,-58,60,-48,26,-13,1,-27,48,7,-39,53,19,60,-87,-16,-4,-53,-17,-124,6,-38,-68,-16,-77,44,-19,14,-31,-22,-33,-20,26,-4,-34,-20,34,-26,-3,-31,-15,83,-5,-20,-32,71,84,16,5,-29,-52,-58, 
  /* [15][0][][] */ -98,-50,31,-63,32,-41,-33,-77,-41,6,-12,72,-21,-7,34,84,-118,-15,21,-82,29,-43,-15,-104,55,-18,45,-32,-55,-127,-66,30,-44,71,111,-116,-29,-48,17,-20,-27,0,40,-33,-16,12,60,110,-55,-11,67,-47,-27,70,34,-69,-113,-24,124,47,-38,33,-95,24,-66,-18,19,29,52,-73,97,-16,74,-51,-20,-50,35,22,45,-12,-4,90,65,29,11,-29,-126,12,31,-66,-90,31,64,-47,-5,74, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0028983314987272024, 0.0024611030239611864, 0.0030216034501791, 0.0027561222668737173, 0.0032856864854693413, 0.0039618588052690029, 0.0024915062822401524, 0.0035101727116852999, 0.00363494036719203, 0.0029367511160671711, 0.0034793203230947256, 0.0027985747437924147, 0.0035585018340498209, 0.0026899469085037708, 0.0039127939380705357, 0.00296217598952353, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 369, -1136, -2871, -3594, -533, 1935, -1156, 694, -710, -343, 8197, -1758, 71, 10872, 7575, -4940, 13263, 218, -4603, -182, -825, 3416, 1220, -2225, 524, -4984, -1589, -4842, 249, -6844, 4270, 466, 14258, -1948, -2374, -64, 1361, -2490, -1673, 9623, 2346, 83, 1035, -3472, 13152, 17331, 1820, 14485, 2680, 11509, 15055, -7255, -1059, -2428, -2924, 11752, -2419, 854, 11955, -766, 7322, 8662, 7559, -6999, 3371, 1159, -1653, 4561, -5608, -1517, 1306, 2032, 18519, 195, -432, 11840, -2327, -12, 8545, 209, 579, 17538, -2959, 2082, 14672, -348, -1108, -3347, -3698, -5602, 18615, -288, -3003, -674, -6807, -4355, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00021332908363547176, 0.00017594288510736078, 0.00013835378922522068, 0.00025375981931574643, 0.00023058704391587526, 0.00027727146516554058, 0.00031539049814455211, 0.00019797375716734678, 0.00026799493934959173, 0.00018889902275986969, 0.00021008853218518198, 0.0003549444954842329, 0.00025536617613397539, 0.00010360239684814587, 0.00012923580652568489, 0.00014932396879885346, 9.9520730145741254e-05, 0.00016831759421620518, 0.00018607695528771728, 0.00011249855742789805, 0.00021994863345753402, 0.0003969593090005219, 0.00031177114578895271, 0.00017623192979954183, 0.00079737015767022967, 0.0001715340040391311, 0.00026682729367166758, 0.00010350882803322747, 0.00016048837278503925, 0.00010922377259703353, 0.00028809142531827092, 0.00025544347590766847, 0.00023645101464353502, 0.00015510618686676025, 0.00027579246670939028, 0.00047654501395300031, 0.00017163604206871241, 0.00021488778293132782, 0.00023484177654609084, 0.00012683415843639523, 0.00018535260460339487, 0.00026318483287468553, 0.00022236754011828452, 0.00021494459360837936, 8.843014802550897e-05, 9.5233517640735954e-05, 0.00016594292537774891, 0.00011555181117728353, 0.00015258473285939544, 8.3941864431835711e-05, 0.00017908707377500832, 9.4528935733251274e-05, 0.00024786198628135026, 0.00017747400852385908, 0.00017428492719773203, 0.00013907912943977863, 0.00017660098092164844, 0.00015217305917758495, 0.00015735546185169369, 0.0001528568536741659, 0.00017377990297973156, 0.00012428579793777317, 0.00015205440286081284, 0.00014283452765084803, 0.00015725701814517379, 0.00026324333157390356, 0.00043985035154037178, 0.00020114898507017642, 0.00022495529265142977, 0.00023852795129641891, 0.00022222750703804195, 0.00013297272380441427, 0.0001122162866522558, 0.0002260673645650968, 0.00029459071811288595, 0.000103743739600759, 0.00014087535964790732, 0.00022250630718190223, 0.0001540539669804275, 0.00017912611656356603, 0.00022105533571448177, 9.2741407570429146e-05, 0.00023595250968355685, 0.00016552953456994146, 0.00010535947512835264, 0.00022708778851665556, 9.247878915630281e-05, 0.00022925461234990507, 0.00025763051235117018, 0.00022256103693507612, 7.0847345341462642e-05, 0.00023730452812742442, 0.00025329453637823462, 0.00025901471963152289, 0.00013350514927878976, 0.00026840038481168449, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -4,126,-46,65,-68,5,35,38,85,-66,-92,69,-24,9,99,-16,-127,0,9,22,37,34,81,104,3,-6,-38,15,-5,12,8,-40,-71,-14,-25,109,-19,59,30,-33,13,-46,-1,90,-127,-47,10,-47,-48,-75,-13,21,66,75,-18,-10,-66,-95,-54,-76,-127,13,-123,-3,-62,53,79,-19,1,29,52,24,-89,22,38,2,-2,-54,-62,38,-4,-74,91,-32,-65,-51,-47,46,-64,28,-111,42,75,-16,70,40, -48,-40,-26,88,-13,83,-17,-6,55,36,-127,46,-40,-77,-96,116,-60,65,42,97,127,-7,86,127,22,1,26,60,8,127,-15,-127,28,90,11,51,52,118,-11,-96,127,-7,93,91,-105,-126,127,-127,-17,-103,-94,10,75,127,-8,-127,-14,69,-127,-47,2,-69,-52,86,-45,76,127,-32,39,127,127,22,-124,29,-37,-77,27,-48,-10,127,-12,-96,123,-77,-102,-45,127,65,86,127,-109,6,127,-22,127,57, 15,-89,-28,10,-27,-9,2,47,64,58,-55,18,-34,56,67,-67,2,14,22,37,34,22,50,63,0,-44,2,59,9,12,-13,-75,-52,-97,-15,62,-14,27,9,-58,-21,29,-25,127,-36,-28,-10,-1,14,-86,17,22,15,4,11,-6,65,-108,2,-10,-56,58,-82,8,38,21,-12,-24,-17,-14,7,0,-52,-52,-20,-7,15,-8,-84,46,-4,-102,71,-6,-32,-55,-31,20,-72,40,-55,54,-8,36,55,-13, 
  /* [0][1][][] */ 104,-17,92,127,5,-59,127,37,-3,-127,-29,127,7,-115,-53,32,-91,-48,79,11,-108,-19,-111,-74,-11,72,-111,127,-84,58,106,40,-6,104,17,127,-127,69,-26,-127,63,-127,21,72,-102,-73,-2,-114,-127,-112,-127,32,127,-43,127,-20,-116,1,-96,26,-65,-78,-32,43,-109,-23,94,-83,-40,28,-37,-127,-112,50,127,-127,95,51,-81,-83,127,-88,-21,127,-59,-6,-43,127,8,35,-66,26,13,-86,111,-4, -127,14,-38,93,-93,-127,-113,-127,51,-16,22,42,-72,-127,-127,127,-89,-127,127,127,38,-127,-127,114,-127,127,20,48,-93,8,-127,45,-127,116,127,-2,6,127,127,-100,-65,36,14,51,-25,-127,-101,-121,-8,-114,-102,125,16,73,111,-96,30,57,126,6,-18,-56,-127,127,-11,-127,108,127,43,47,-121,-104,-37,43,-101,-108,127,127,107,-111,-85,-14,-127,96,-127,-85,106,115,127,107,-127,-127,-72,-51,89,127, 66,-5,118,98,5,-31,-11,21,-15,83,-71,77,14,-35,-117,80,35,-35,16,13,-93,-7,-80,-60,-8,20,127,-7,127,82,0,-96,-22,-127,-5,115,-125,20,-75,-81,-15,85,19,95,-10,-82,-20,-55,120,-127,-119,13,67,-68,-115,12,127,0,-114,127,-73,-67,2,18,127,-39,-15,-25,-47,11,-62,-45,-126,-127,2,-72,4,-17,-127,-90,-81,-127,-14,111,-86,5,-51,31,0,5,-25,42,-30,127,44,-33, 
  /* [0][2][][] */ 21,-127,74,25,49,14,32,22,-46,-37,-7,-43,16,-55,30,25,-59,35,-7,17,3,28,17,-39,-1,59,-11,13,-61,9,-17,46,-34,-10,-21,67,44,-16,45,-16,-16,21,-17,-30,-29,-58,-33,15,-70,23,-26,59,23,-3,-43,-23,-26,-35,8,42,-71,-2,49,0,-50,39,-45,-26,21,-2,51,91,-30,18,30,-13,-8,-37,-17,36,-12,-23,1,-42,-45,77,-74,-29,-73,37,-9,21,5,1,35,-10, -63,44,127,55,127,94,-31,1,-127,17,-81,-57,127,-24,-74,47,-4,53,1,-46,15,8,44,-10,48,-49,-14,33,-23,71,-39,1,-60,37,8,-2,64,93,54,-65,-51,-15,-127,12,-10,-40,-55,-49,-16,-57,-56,127,123,-69,-31,-92,-27,127,-77,36,44,-127,102,79,-45,14,-21,-1,127,-2,-11,79,-127,25,-39,-55,18,-56,-20,-68,-5,-64,-30,-92,-75,127,79,7,123,21,25,37,-16,-9,62,25, 27,72,48,0,18,-2,-6,24,-21,43,17,-2,-5,-12,16,34,-23,58,-3,33,-23,20,6,-39,-15,58,30,33,16,14,-38,-67,-30,18,-9,59,25,-35,20,-2,-20,-12,-3,-97,-31,-61,-37,11,23,40,-21,36,7,6,25,-3,37,-20,33,89,-89,5,18,-23,30,13,-13,-25,17,-8,10,53,-20,-19,-15,8,18,-21,-47,75,-21,-74,-11,-18,-52,53,-72,-31,-89,42,-11,23,12,11,0,-28, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0090664857998490334, 0.0074775726534426212, 0.0058800359256565571, 0.01078479178249836, 0.0097999488934874535, 0.01178403664380312, 0.013404096476733685, 0.0084138847887516022, 0.011389784514904022, 0.0080282082781195641, 0.008928762748837471, 0.015085140243172646, 0.010853062383830547, 0.0044031017459928989, 0.0054925219155848026, 0.0063462685793638229, 0.0042296308092772961, 0.0071534975431859493, 0.0079082706943154335, 0.0047811884433031082, 0.0093478169292211533, 0.01687077060341835, 0.013250273652374744, 0.0074898567982017994, 0.033888231962919235, 0.0072901947423815727, 0.011340159922838211, 0.0043991249985992908, 0.0068207555450499058, 0.0046420102007687092, 0.012243885546922684, 0.010856348089873791, 0.010049168020486832, 0.0065920129418373108, 0.011721179820597172, 0.020253162831068039, 0.007294531911611557, 0.0091327307745814323, 0.0099807754158973694, 0.00539045175537467, 0.0078774858266115189, 0.011185355484485626, 0.0094506200402975082, 0.0091351447626948357, 0.0037582812365144491, 0.0040474245324730873, 0.0070525743067264557, 0.0049109519459307194, 0.0064848507754504681, 0.0035675291437655687, 0.007611200213432312, 0.0040174797177314758, 0.010534134693443775, 0.0075426450930535793, 0.0074071092531085014, 0.0059108627028763294, 0.007505541667342186, 0.0064673549495637417, 0.0066876071505248547, 0.0064964159391820431, 0.0073856455273926258, 0.0052821463905274868, 0.0064623118378221989, 0.0060704671777784824, 0.0066834231838583946, 0.011187841184437275, 0.01869363896548748, 0.0085488315671682358, 0.0095605999231338501, 0.010137437842786312, 0.0094446688890457153, 0.0056513403542339802, 0.0047691920772194862, 0.0096078626811504364, 0.012520105578005314, 0.0044091087765991688, 0.0059872027486562729, 0.0094565181061625481, 0.0065472931601107121, 0.0076128598302602768, 0.0093948515132069588, 0.003941509872674942, 0.010027981363236904, 0.0070350049063563347, 0.0044777775183320045, 0.0096512306481599808, 0.0039303484372794628, 0.0097433207556605339, 0.010949295945465565, 0.0094588436186313629, 0.0030110119841992855, 0.01008544210344553, 0.010765017010271549, 0.011008125729858875, 0.0056739686988294125, 0.011407015845179558, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 2912, 2178, 15, -1087, 2750, 4627, 5050, 714, -284, 6234, 983, -2872, 2244, 1100, 239, -454, 2271, 4819, -549, 308, 2869, 8229, 11080, -709, -2255, -415, 5536, 165, 1176, 612, 6359, -697, 6654, 1205, 2478, -3151, 520, -2643, 534, 937, 1677, 1039, 1012, -649, 539, 1438, 2422, 2703, 2299, 1872, 3234, 1592, -2097, 917, 610, 1138, 862, 2276, 3748, 700, -774, 2835, 2639, 1800, 3601, 3192, -4091, 1858, 2183, -567, 4081, 1407, 1642, 1738, 2684, 989, -587, 913, 1334, 2347, 1939, 1620, 5527, 207, 1236, 2646, 685, -946, 7416, -499, 174, -527, 5076, 1732, -446, -715, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00026515111676417291, 0.00018256943440064788, 0.00032396632013842463, 0.00029770770925097167, 0.00027417382807470858, 0.00017014556215144694, 0.00017252063844352961, 0.0003330013423692435, 0.00032072208705358207, 0.00013221285189501941, 0.00029182762955315411, 0.00017185139586217701, 0.00023638713173568249, 0.00035156132071278989, 0.00029438611818477511, 0.00020546899759210646, 0.00023929050075821579, 0.00014584396558348089, 0.00015410462219733745, 0.00022924802033230662, 0.00021088344510644674, 0.00011281330807833001, 9.0680172434076667e-05, 0.00027691497234627604, 0.00027546301134862006, 0.00023032269382383674, 0.00015359953977167606, 0.000305679946905002, 0.00020489163580350578, 0.00032225463655777276, 0.0001399549946654588, 0.00041109355515800416, 0.00013701998977921903, 0.0003448588540777564, 0.00024015190138015896, 0.00023535577929578722, 0.00025843497132882476, 0.00021486009063664824, 0.00027072578086517751, 0.00033525502658449113, 0.00030377149232663214, 0.00027145855710841715, 0.00035447534173727036, 0.00029730968526564538, 0.00039651288534514606, 0.00026330951368436217, 0.00025024081696756184, 0.00023770917323417962, 0.00029417319456115365, 0.00024646747624501586, 0.00022514710144605488, 0.00025536763132549822, 0.0002393960312474519, 0.00030888646142557263, 0.00026741079636849463, 0.00027871105703525245, 0.00033549388172104955, 0.00019884933135472238, 0.00018798637029249221, 0.0002407538122497499, 0.00028962770011276007, 0.00020878715440630913, 0.00023893220350146294, 0.0003445119655225426, 0.00018324414850212634, 0.00021867328905500472, 0.00016645087453071028, 0.000261921581113711, 0.00028073129942640662, 0.00028655925416387618, 0.00018780049867928028, 0.00017780871712602675, 0.00025408569490537047, 0.00023245671764016151, 0.00022597849601879716, 0.00022786874615121633, 0.00023574761871714145, 0.00032415371970273554, 0.00031099983607418835, 0.00023571652127429843, 0.0002207008219556883, 0.00023791572311893106, 0.00014629014185629785, 0.00023210058861877769, 0.00026876511401496828, 0.00025655125500634313, 0.00026462270761840045, 0.00031304097501561046, 0.0001200585174956359, 0.00026099191745743155, 0.00033365795388817787, 0.00037579023046419024, 0.00016931963909883052, 0.00023946675355546176, 0.00032053541508503258, 0.00021278958593029529, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -46,80,-9,-11,-5,-47,-64,-17,19,-34,38,-77,69,-74,5,-127, 
  /* [1][0][][] */ -49,77,-94,-113,-87,45,-39,75,-60,6,81,-56,59,127,50,17, 
  /* [2][0][][] */ -34,-54,-10,0,1,-48,33,-87,-86,127,44,13,83,57,-74,108, 
  /* [3][0][][] */ -17,-72,-4,-55,-49,26,-35,-101,-23,-28,62,-55,-38,-58,-127,-6, 
  /* [4][0][][] */ 39,6,8,19,-33,-17,-127,40,18,46,15,38,-3,-17,-39,-87, 
  /* [5][0][][] */ -108,85,-127,-33,116,-60,-58,-124,61,-41,31,-16,9,-117,-113,-109, 
  /* [6][0][][] */ -29,-45,5,30,-127,70,67,-17,-21,-10,102,-25,11,14,-99,26, 
  /* [7][0][][] */ -45,72,127,-55,37,52,2,-50,51,60,-91,-36,38,1,-5,49, 
  /* [8][0][][] */ -15,2,34,-1,66,-8,117,127,-26,13,-66,-41,19,39,-58,-42, 
  /* [9][0][][] */ 26,53,101,22,-90,-39,-126,-127,43,21,115,40,-39,-91,64,-40, 
  /* [10][0][][] */ -36,-127,22,-67,-123,66,25,18,-28,-46,-19,40,-28,56,-94,6, 
  /* [11][0][][] */ 127,-60,-15,77,-108,-25,74,2,88,103,-42,55,45,-97,-19,127, 
  /* [12][0][][] */ -71,-69,127,4,77,-15,-6,30,50,-38,98,90,1,27,-108,38, 
  /* [13][0][][] */ -12,-29,26,35,12,-4,111,12,-84,-2,1,-1,-27,127,83,-76, 
  /* [14][0][][] */ 106,-85,127,-2,41,29,80,48,92,59,37,45,27,-28,29,-60, 
  /* [15][0][][] */ 3,113,13,-50,54,127,-57,70,-63,-40,-29,-11,-21,98,-13,-50, 
  /* [16][0][][] */ -53,83,126,-29,39,88,-1,-28,-17,5,-28,32,98,10,103,127, 
  /* [17][0][][] */ -16,127,70,-120,30,-71,-44,-81,-62,71,-30,52,-98,-9,109,-101, 
  /* [18][0][][] */ -102,-14,-72,-121,118,96,-46,-77,46,111,127,111,18,124,-37,2, 
  /* [19][0][][] */ 56,90,57,59,45,-14,-13,46,-30,96,58,127,64,53,-50,66, 
  /* [20][0][][] */ 112,-3,34,62,-102,-6,-22,48,-54,-68,-127,-11,96,-62,39,-12, 
  /* [21][0][][] */ -92,-75,-7,102,-43,-22,-127,27,11,8,8,26,-60,27,-34,-8, 
  /* [22][0][][] */ -6,-11,-81,-41,127,6,-28,52,71,62,52,46,-11,15,-25,50, 
  /* [23][0][][] */ -74,19,-28,29,29,75,102,84,-13,127,-18,-23,-8,26,-74,-22, 
  /* [24][0][][] */ 26,-99,53,19,127,28,71,-58,68,24,36,20,-78,34,-19,-27, 
  /* [25][0][][] */ 103,-37,110,37,-18,-27,-51,74,124,-13,-79,-9,102,-50,127,31, 
  /* [26][0][][] */ 75,37,73,121,127,-15,-40,-27,7,57,30,122,75,-79,-14,-46, 
  /* [27][0][][] */ -43,42,-78,14,-44,76,12,-25,65,-53,99,0,28,-20,127,69, 
  /* [28][0][][] */ -1,57,-114,-113,72,-71,16,-68,-127,90,-50,48,-5,52,-29,70, 
  /* [29][0][][] */ 68,62,-63,57,19,62,-54,-24,73,30,-10,33,-127,20,-49,63, 
  /* [30][0][][] */ -19,55,-105,-59,54,-21,6,-3,-67,25,-35,9,25,33,-6,127, 
  /* [31][0][][] */ -1,-114,96,54,50,-63,-78,28,-17,0,18,-49,-65,56,34,127, 
  /* [32][0][][] */ -44,59,45,57,-126,43,11,35,32,-127,-3,-93,26,49,39,49, 
  /* [33][0][][] */ -78,-13,57,103,-17,24,-58,15,-14,-35,3,-16,-13,2,4,127, 
  /* [34][0][][] */ -10,-5,-93,-83,43,1,-2,55,3,-19,17,5,-31,-35,-24,127, 
  /* [35][0][][] */ 66,-27,8,-18,0,22,-57,-10,-17,-127,-39,9,-5,-43,41,-2, 
  /* [36][0][][] */ -6,14,-127,-23,23,83,-20,31,-9,10,66,21,16,17,-58,29, 
  /* [37][0][][] */ 58,24,45,-54,45,-112,8,15,-127,62,-62,-15,27,26,126,16, 
  /* [38][0][][] */ -27,112,7,-57,44,41,77,-82,10,-24,-98,51,-36,-127,-114,20, 
  /* [39][0][][] */ 78,33,-122,-104,-10,-36,21,-45,32,17,-10,-40,45,-4,-127,-69, 
  /* [40][0][][] */ -51,10,-88,-89,-56,-8,27,-127,-14,-27,26,-36,43,74,29,88, 
  /* [41][0][][] */ -48,-94,7,127,-21,0,-60,1,-13,-45,81,-44,-67,-15,-1,41, 
  /* [42][0][][] */ -22,96,-50,-127,10,47,-6,-30,79,1,-58,13,115,-29,-16,23, 
  /* [43][0][][] */ 10,20,9,11,127,-36,36,26,13,97,-42,-82,-87,-43,-10,-34, 
  /* [44][0][][] */ 68,-29,7,40,-23,-11,-7,44,21,-70,33,8,127,3,-48,-24, 
  /* [45][0][][] */ 11,-115,-95,48,-55,-83,-3,62,43,-43,47,47,-81,127,17,-14, 
  /* [46][0][][] */ -7,-68,35,99,-10,3,-107,51,7,-43,39,-11,50,91,90,127, 
  /* [47][0][][] */ -31,-45,11,92,4,-6,43,21,11,-56,-127,-46,39,-23,-64,8, 
  /* [48][0][][] */ -96,127,-4,-48,-15,61,17,-102,57,3,28,-68,26,-124,-55,-5, 
  /* [49][0][][] */ -65,0,38,-56,31,23,126,127,-47,-16,19,50,-36,43,-65,41, 
  /* [50][0][][] */ 43,10,-77,36,43,-125,-35,-57,-62,68,-56,0,17,-74,-127,-47, 
  /* [51][0][][] */ -41,66,-30,119,-8,48,-50,-73,-62,-94,15,-56,-7,26,-25,127, 
  /* [52][0][][] */ -126,-9,27,-2,41,67,59,-10,2,-93,-25,-34,-85,-76,-127,21, 
  /* [53][0][][] */ -52,-62,-53,-127,-42,1,31,72,24,-58,-38,39,-35,19,75,111, 
  /* [54][0][][] */ -5,-84,7,-2,-76,69,77,-18,-35,-79,76,61,-15,-21,-127,61, 
  /* [55][0][][] */ -19,-42,-48,18,69,-18,79,112,-77,-81,-127,-16,89,-44,-4,58, 
  /* [56][0][][] */ 70,-42,-38,-26,-127,21,-120,-7,5,-28,-40,5,81,-40,30,3, 
  /* [57][0][][] */ -72,42,18,-1,127,37,66,27,-27,59,-16,-23,-87,103,-114,-21, 
  /* [58][0][][] */ 16,-4,-18,-3,23,-29,-54,-59,73,-127,-73,-22,-94,-27,-39,44, 
  /* [59][0][][] */ -77,-72,-5,12,0,49,-95,-78,122,127,-96,2,-32,-14,-41,23, 
  /* [60][0][][] */ 8,-40,16,37,-127,-64,34,-12,-4,24,-26,33,-8,-26,21,40, 
  /* [61][0][][] */ 34,51,-115,-11,-60,-10,-127,-83,-53,24,55,127,71,-42,123,77, 
  /* [62][0][][] */ 49,-38,53,-31,-13,12,14,127,-36,103,3,95,16,25,72,86, 
  /* [63][0][][] */ 26,-115,-16,-24,-55,29,57,-30,-36,-32,15,-7,-14,115,127,46, 
  /* [64][0][][] */ -40,-10,-72,-22,-17,81,32,-32,7,-53,36,1,59,-41,-89,127, 
  /* [65][0][][] */ -22,8,60,48,46,-45,59,62,-24,17,-127,-89,13,87,-46,-12, 
  /* [66][0][][] */ -30,-127,-9,-106,-79,-118,60,-37,-38,-45,37,99,-59,-52,-74,77, 
  /* [67][0][][] */ -19,-65,-127,-21,-68,96,-9,-118,-88,-54,-43,-110,-36,-11,-37,32, 
  /* [68][0][][] */ 127,30,13,-10,-61,17,-24,-57,-51,-87,-16,-7,22,-41,51,-46, 
  /* [69][0][][] */ 78,-6,24,-34,15,-52,-90,64,-29,127,-14,3,15,44,103,-16, 
  /* [70][0][][] */ 69,9,-25,62,-106,57,2,-93,82,127,32,78,55,-66,-13,25, 
  /* [71][0][][] */ 85,-94,86,85,-78,-45,21,-30,127,17,-54,71,64,-60,8,5, 
  /* [72][0][][] */ -6,-32,47,118,50,-7,-127,65,106,-12,22,-8,-68,-58,-83,74, 
  /* [73][0][][] */ 79,-1,37,-127,70,-81,-75,36,-8,94,-10,30,3,-105,48,-20, 
  /* [74][0][][] */ 74,21,54,44,-127,-19,71,-11,-107,-44,24,-39,22,-62,2,42, 
  /* [75][0][][] */ 53,127,-106,31,56,46,-14,-13,-27,-20,41,54,-93,62,57,71, 
  /* [76][0][][] */ -83,-44,14,-50,-63,-2,108,10,-72,19,102,53,-50,-127,-17,121, 
  /* [77][0][][] */ -64,127,6,3,-60,-86,55,78,50,-62,-28,66,-52,51,-17,86, 
  /* [78][0][][] */ 127,41,-102,58,-57,19,-107,13,0,-18,-60,-20,27,-96,43,36, 
  /* [79][0][][] */ -76,-2,106,24,-14,-115,-73,3,-28,26,15,8,-74,127,-38,45, 
  /* [80][0][][] */ 93,127,-18,-124,9,21,121,-45,49,43,-63,6,93,-68,47,-19, 
  /* [81][0][][] */ 22,-79,16,-94,90,25,-24,101,127,15,-18,-45,-25,38,-113,-71, 
  /* [82][0][][] */ 58,59,89,-24,91,-91,52,41,23,127,-37,43,-28,-42,24,-87, 
  /* [83][0][][] */ -79,127,34,38,55,62,96,86,-14,74,-47,-99,-103,115,-18,-91, 
  /* [84][0][][] */ 50,-63,-13,86,29,-85,-53,96,-98,76,-77,-24,-127,83,29,-70, 
  /* [85][0][][] */ -127,19,-30,-32,-28,-53,-95,-50,-38,43,9,-102,-72,-97,-37,28, 
  /* [86][0][][] */ 5,79,73,93,49,-15,57,49,-17,16,-32,-67,49,86,-127,-41, 
  /* [87][0][][] */ -21,39,127,-66,-106,-13,56,43,23,-54,41,58,-36,9,-18,22, 
  /* [88][0][][] */ -26,-62,-127,37,53,37,-11,-8,-41,-90,-89,-66,117,-24,-4,50, 
  /* [89][0][][] */ 37,4,-15,-121,5,-47,-73,72,127,-11,49,-86,25,-46,64,-50, 
  /* [90][0][][] */ -5,74,16,19,-21,31,52,101,-23,-38,-1,127,60,20,-12,66, 
  /* [91][0][][] */ -63,27,-17,69,82,51,-30,-110,-51,41,-12,17,-127,-114,-52,-21, 
  /* [92][0][][] */ -12,59,11,-25,-127,6,-45,53,-31,52,71,74,-5,-17,49,2, 
  /* [93][0][][] */ 86,31,93,49,-127,-79,16,10,-19,-53,-20,-46,11,-52,-7,-3, 
  /* [94][0][][] */ -37,-127,47,-112,19,47,-20,8,73,-57,15,49,21,45,-54,62, 
  /* [95][0][][] */ -59,-73,-16,-109,127,80,-60,40,126,40,-85,76,-54,108,-82,26, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0025254623033106327, 0.0017389035783708096, 0.0030856544617563486, 0.0028355512768030167, 0.002611400093883276, 0.0016205708961933851, 0.0016431926051154733, 0.0031717093661427498, 0.0030547543428838253, 0.0012592765269801021, 0.0027795457281172276, 0.0016368184005841613, 0.0022514963056892157, 0.003348486265167594, 0.0028039142489433289, 0.001957013038918376, 0.0022791498340666294, 0.0013891075504943728, 0.0014677871949970722, 0.0021834990475326777, 0.0020085836295038462, 0.0010745032923296094, 0.00086369371274486184, 0.002637508325278759, 0.0026236791163682938, 0.0021937349811196327, 0.001462976448237896, 0.0029114838689565659, 0.001951513928361237, 0.0030693511944264174, 0.0013330173678696156, 0.0039155078120529652, 0.0013050625566393137, 0.0032846475951373577, 0.0022873543202877045, 0.0022416731808334589, 0.0024614934809505939, 0.0020464595872908831, 0.0025785588659346104, 0.0031931749545037746, 0.0028933065477758646, 0.0025855381973087788, 0.0033762410748749971, 0.0028317600954324007, 0.0037766324821859598, 0.0025079217739403248, 0.0023834474850445986, 0.0022640882525593042, 0.0028018862940371037, 0.0023475077468901873, 0.0021444393787533045, 0.0024322783574461937, 0.0022801549639552832, 0.0029420244973152876, 0.0025469849351793528, 0.0026546153239905834, 0.0031954499427229166, 0.0018939633155241609, 0.0017904978012666106, 0.0022930873092263937, 0.0027585921343415976, 0.0019886172376573086, 0.0022757372353225946, 0.0032813437283039093, 0.0017453299369663, 0.0020827788393944502, 0.001585380407050252, 0.0024947021156549454, 0.0026738576125353575, 0.0027293665334582329, 0.0017887273570522666, 0.0016935595776885748, 0.0024200684856623411, 0.0022140606306493282, 0.0021523581817746162, 0.0021703620441257954, 0.0022454052232205868, 0.0030874393414705992, 0.0029621536377817392, 0.0022451090626418591, 0.0021020902786403894, 0.0022660556714981794, 0.0013933571754023433, 0.0022106687538325787, 0.0025598842184990644, 0.0024435517843812704, 0.0025204294361174107, 0.0029815947636961937, 0.001143511151894927, 0.0024858475662767887, 0.0031779634300619364, 0.0035792570561170578, 0.0016127043636515737, 0.0022808285430073738, 0.0030529764480888844, 0.0020267388317734003, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27452, -3833, -4481, -15764, 14947, -12492, 20215, -7741, 12572, -11879, 16210, 8277, -5982, -31167, -722, 5941, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.5620872192084789e-05, 5.934052387601696e-05, 8.4354920545592904e-05, 6.9475638156291097e-05, 8.9488748926669359e-05, 0.00016609458543825895, 5.2833431254839525e-05, 6.7028740886598825e-05, 0.00010647949238773435, 0.00011226224160054699, 0.00010189355089096352, 7.5338437454774976e-05, 8.1808320828713477e-05, 8.9518522145226598e-05, 6.5460160840302706e-05, 8.468508895020932e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 25,37,9,28,-17,-61,19,-41,-17,-78,18,10,57,-52,63,15,-74,-39,23,11,87,6,-81,-6,-6,85,127,69,14,84,55,-29,-4,12,0,-30,40,6,-1,-34,116,16,30,-28,8,-7,11,-39,17,-26,95,-28,-68,-14,38,31,-18,-45,30,25,-10,23,-65,-20,9,4,63,18,12,-12,4,37,30,39,8,43,72,-23,47,7,-31,65,31,27,-51,1,-22,74,1,3,-66,-6,18,3,109,85, 
  /* [1][0][][] */ 13,43,-59,-5,8,-47,110,-82,-66,-30,-64,-49,-18,-27,-3,-49,-12,-39,-30,-20,-18,-93,106,-25,-14,15,9,60,-38,21,-30,10,-43,10,21,13,-26,46,-59,87,32,5,3,-43,46,-45,-8,21,-64,-6,53,-103,-29,44,61,55,55,21,-73,23,-51,-3,-1,-21,26,10,92,13,-45,-127,13,6,-7,51,-21,38,-68,-17,98,-36,44,-22,54,-48,-19,-74,-28,20,-17,-43,49,-3,79,-50,-28,53, 
  /* [2][0][][] */ 34,-24,17,-10,71,62,-57,62,-58,36,18,-31,52,-12,29,52,43,-18,-127,-6,-22,-65,-22,22,2,-2,-48,32,-32,-2,-21,81,-17,-42,5,31,-55,30,-23,-44,67,25,20,51,9,68,10,-17,-89,6,-17,5,-24,49,5,-61,46,11,37,25,-27,-12,-24,48,46,-8,-13,3,-27,1,-26,-21,22,40,34,61,-49,-29,-14,-9,27,26,51,-6,-9,-32,-5,-52,-20,-9,20,54,-8,6,105,-49, 
  /* [3][0][][] */ 29,-26,-33,-108,4,-33,119,-34,16,108,-72,-15,-13,-26,-3,58,66,25,-14,1,-49,15,16,7,-51,96,57,-7,-26,-21,-74,52,-15,-32,37,-11,-3,-54,-22,55,8,16,-9,45,57,-47,5,40,63,-39,35,-57,105,41,36,-13,22,-12,-23,-27,-40,41,61,-10,-6,-36,127,-27,-29,-22,-76,43,14,-78,3,-84,7,-36,124,21,7,-57,-23,-58,-28,-47,82,84,-41,43,-32,-13,15,-69,-26,36, 
  /* [4][0][][] */ -62,68,37,38,-24,3,-35,-37,20,-36,8,-29,-2,36,-22,15,-15,-48,-14,-73,31,-31,-61,20,-40,-30,-30,25,-21,127,-56,-19,0,-38,8,-49,78,44,-25,39,30,25,2,-21,-37,4,50,-37,23,-15,-44,-5,-66,20,35,23,1,56,-22,29,-41,-79,-33,-19,49,13,-68,-8,9,7,46,-87,-17,49,60,54,-54,18,-79,41,68,65,44,-62,49,-75,-43,-80,-22,-54,-73,-8,-4,1,38,13, 
  /* [5][0][][] */ -7,-21,46,-19,-16,-17,-30,9,40,15,-18,2,-4,-31,19,-17,-18,5,-53,-28,-16,11,-20,3,20,-48,49,-10,-11,43,11,79,5,-73,27,15,-31,-22,-25,-2,-38,6,-27,7,-6,13,-70,9,-34,26,36,-20,28,-62,-8,7,-39,-51,7,-22,45,12,10,41,-43,9,116,-28,-5,-15,15,2,12,15,39,-6,2,-10,127,30,-14,-15,-27,33,40,68,15,80,-3,-11,1,12,-8,-21,-29,20, 
  /* [6][0][][] */ 45,-64,75,17,-47,118,-58,-103,-35,-50,-77,51,12,11,-47,84,5,51,-15,-41,-92,-8,-84,-67,-15,-35,-16,58,-127,37,-10,-28,40,83,-18,-39,-26,-45,20,-23,-44,37,55,-22,21,30,-113,-27,50,-8,-78,-107,65,15,-55,-20,4,-11,24,-11,-8,-51,35,14,48,-72,-53,-53,-114,8,-14,-66,-10,-100,0,-98,83,21,-59,37,-52,70,49,-100,63,-32,-8,-13,-62,92,-85,79,32,-57,69,-71, 
  /* [7][0][][] */ -40,-39,-65,45,-54,15,38,-26,-102,5,80,45,-10,-60,-34,-22,-9,-21,10,1,-46,-36,-28,-70,62,64,9,84,23,38,16,42,-62,-127,34,91,-12,6,-42,-11,-1,-21,14,-75,53,37,75,82,-32,47,-42,-19,34,-25,18,-74,-28,45,-64,-22,66,2,-6,-68,74,-63,102,-37,-74,-21,83,8,-11,-41,-90,-34,52,-10,99,-29,-4,4,-81,-34,50,26,-60,71,24,24,29,46,37,-11,73,12, 
  /* [8][0][][] */ -18,-61,6,7,-22,-12,20,6,-11,-11,43,37,4,41,-39,-9,67,8,16,1,-12,-81,-44,-21,-27,-34,66,11,-14,44,1,-31,-18,7,11,11,-42,-11,13,-7,-9,41,34,-36,13,-8,28,-11,38,-2,47,-8,0,1,-41,5,-1,96,-72,0,-23,-53,-55,-8,-80,-41,-24,25,-16,10,44,-38,-37,-127,46,-96,1,9,-55,21,-1,-14,0,60,60,-70,-49,44,-33,82,11,-16,-41,10,6,-58, 
  /* [9][0][][] */ -31,-19,-38,41,25,14,26,26,-40,-4,57,52,-33,38,25,-40,-2,10,-20,-42,0,31,1,1,-22,54,15,18,46,6,7,-13,-27,-26,10,55,-14,-3,13,-2,-4,-26,7,5,17,54,15,33,-45,3,-6,40,117,7,-21,-7,23,-5,37,18,-30,6,68,-7,16,12,61,14,43,-8,-27,44,19,-127,-36,-111,-47,-16,30,6,0,38,26,-29,48,8,-56,0,-1,90,37,30,38,37,-4,36, 
  /* [10][0][][] */ 23,37,13,-16,-14,13,-53,-6,70,2,-45,23,30,4,-21,-50,-42,3,18,9,18,-13,-13,-33,31,-19,-99,41,-30,49,5,10,28,34,-21,-10,14,-2,-3,-14,39,-21,52,-57,-50,-8,19,24,15,6,-3,-21,-24,1,-6,31,-28,1,-11,-9,-6,-42,-7,2,-12,-9,-85,-40,-37,-18,43,-16,-21,38,28,28,63,-15,-91,3,-37,36,-13,1,-11,6,-64,-127,-21,17,6,25,49,-39,12,16, 
  /* [11][0][][] */ 5,-46,8,16,-57,40,28,32,76,-28,-24,-37,33,17,-2,-4,-39,51,10,-51,18,34,9,-53,48,43,67,17,38,-52,-36,27,23,127,-107,-3,21,-15,67,-22,-47,55,-30,1,-36,3,-4,-21,33,-22,-29,-36,-25,23,-87,78,-56,10,13,-16,31,-10,-22,-103,-21,-46,-103,-89,7,-28,-110,29,74,11,-14,-13,36,77,-104,-53,-33,13,-3,2,-15,7,63,81,21,-43,24,18,-48,23,102,32, 
  /* [12][0][][] */ 14,51,-27,-10,6,-30,11,9,54,-32,22,-8,0,-33,0,7,3,-45,-34,7,10,57,10,36,-37,-20,-113,-4,61,-27,27,2,-18,-76,62,-19,37,-21,9,22,-1,-45,18,25,22,3,18,-18,-66,-18,-39,85,67,-18,19,-66,3,13,-16,-27,22,40,72,13,-20,0,39,22,127,32,12,33,28,-25,-16,-6,-31,-36,30,-69,0,-33,36,-39,4,3,12,-96,-7,31,-30,20,-1,51,14,41, 
  /* [13][0][][] */ 3,19,-85,17,31,26,-11,-9,28,74,-45,40,-56,-52,73,-49,23,40,53,11,-40,-50,-12,19,42,62,-16,27,-1,34,66,-21,-27,62,-2,44,9,-35,-59,-57,1,-33,51,10,46,53,-31,59,-33,34,9,30,-30,-62,66,43,21,-49,-15,-16,26,39,8,-25,27,91,127,51,28,-10,-58,21,46,68,-95,71,24,-84,115,-32,-29,-33,35,-1,20,44,-34,-16,-3,-46,29,55,34,22,72,40, 
  /* [14][0][][] */ -25,64,7,14,-57,-50,40,33,-89,-19,76,19,-92,-12,81,-21,-26,9,-50,13,-31,31,-106,27,-62,12,-35,-123,11,-11,29,69,-78,9,16,5,-42,-63,-8,-55,23,-44,90,-18,15,54,-69,30,1,-43,93,12,-15,23,-27,35,-57,46,-6,44,25,69,-1,51,22,-66,21,-63,22,57,72,68,-51,29,5,20,15,2,43,21,-78,125,-3,-127,89,-9,-2,24,-116,-7,-9,-3,-12,14,26,41, 
  /* [15][0][][] */ 59,-36,38,21,22,10,-28,-10,30,32,-67,-9,78,58,-24,-18,-11,22,-77,53,10,-10,26,29,60,-30,73,31,29,-33,-36,73,75,48,-6,-80,61,62,76,46,73,42,-16,-16,-39,-127,24,-40,-41,-23,-29,0,-22,-35,-32,38,-49,-3,-6,2,11,-58,-46,32,21,44,-54,29,-7,-20,-13,-13,18,-109,-42,-97,-15,25,-104,14,69,-40,42,12,-43,-9,-2,-18,42,85,3,-51,-32,-36,29,-42, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0027888868935406208, 0.0025219721719622612, 0.0035850841086357832, 0.0029527146834880114, 0.0038032718002796173, 0.0070590195246040821, 0.0022454208228737116, 0.0028487215749919415, 0.0045253783464431763, 0.0047711450606584549, 0.004330475814640522, 0.0032018835190683603, 0.0034768537152558565, 0.0038045372348278761, 0.0027820568066090345, 0.003599116113036871, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 7511, -204, -7371, 7816, -758, 865, 420, -964, 2746, -4863, -989, 1064, 13135, -2514, -1768, -8304, -306, -1728, -9152, 2865, -684, 516, -6150, -691, -17, 11322, -11287, -3579, 566, -3118, 2405, 306, 19571, 1344, -5642, 550, 1142, 11251, 258, 9783, -956, 7535, -1895, 10459, 1552, -320, 21815, 4183, -6550, 383, -2603, 1191, 66, -3086, -2017, 3284, -2385, 5423, 669, 4807, -139, 2408, 3007, 10780, 16467, 657, 13492, 13391, -2442, 519, -900, -1240, 2419, 1200, -3890, -267, 16449, 7217, 9175, 8576, 9300, -1901, 13210, 7976, -2478, -593, 7352, -7259, 9968, -709, -7101, -3281, 661, -1311, 16271, -700, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00015621821512468159, 0.00032040404039435089, 0.00012075163976987824, 0.00017944867431651801, 0.0001873853470897302, 0.00045594136463478208, 0.00010238173126708716, 0.00031552577274851501, 0.00037069089012220502, 0.00023095229698810726, 0.00034954148577526212, 0.00013410112296696752, 0.00010834027489181608, 0.00018385554722044617, 0.0002397575881332159, 0.00015085314225871116, 0.00025655617355369031, 0.00030859769321978092, 0.00016234791837632656, 0.00029883751994930208, 0.00025624732370488346, 0.00023269547091331333, 0.00012831752246711403, 0.00019651022739708424, 0.0022615145426243544, 0.00013441938790492713, 0.00021557639411184937, 0.00019712463836185634, 0.00034500603214837611, 0.00018034846289083362, 0.00018358367378823459, 0.00039101604488678277, 7.9280544014181942e-05, 0.00050477957120165229, 0.000138113260618411, 0.00018070382066071033, 0.00027671817224472761, 9.8415148386266083e-05, 0.00023904358386062086, 0.0001423151115886867, 0.0006218423368409276, 0.00016836242866702378, 0.00019337204867042601, 9.3569455202668905e-05, 0.00016364803013857454, 0.00022987517877481878, 8.7126703874673694e-05, 0.00025538660702295601, 0.00016420219617430121, 0.00036613087286241353, 0.00031959495390765369, 0.00020166936155874282, 0.00014661760360468179, 0.00027048744959756732, 0.00023133812646847218, 0.00020194065291434526, 0.00016770484216976911, 0.0003746377769857645, 0.00051758449990302324, 0.00021340198873076588, 0.00036441648262552917, 0.00028661356191150844, 0.00018631591228768229, 0.00010528538405196741, 0.00015281293599400669, 0.00050322245806455612, 0.00011820728832390159, 0.00011227636423427612, 0.00026998302200809121, 0.00044414371950551867, 0.00022136194456834346, 0.00034053946728818119, 0.00031434174161404371, 0.00020179999410174787, 0.00014645558258052915, 0.0002299357729498297, 8.3159429777879268e-05, 0.00018260271463077515, 0.00014361062494572252, 0.00016898797184694558, 0.00014293978165369481, 0.00027551306993700564, 0.00010573807958280668, 0.00033562860335223377, 8.9159046183340251e-05, 0.00039964893949218094, 0.00015208724653348327, 0.00022558338241651654, 0.00010361604654463008, 0.00020599282288458198, 0.00013380649033933878, 0.00021804842981509864, 0.00029531403561122715, 0.00020679978479165584, 0.00011261556210229173, 0.00021668625413440168, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -29,-20,1,-45,99,8,57,-1,-9,-10,-6,-53,-44,4,-14,-1,-9,4,-5,-21,-15,24,-18,47,2,-67,-26,-3,17,2,23,-3,-48,-3,10,-35,0,-74,-24,29,15,8,51,-56,-27,47,-87,-30,-47,8,-6,59,-64,30,41,-5,8,-22,-1,-36,-1,-24,-15,-45,-21,-29,-46,-47,-26,14,111,4,-23,-9,4,-2,-19,37,127,-3,-36,10,-64,-16,-37,-24,27,15,-40,-10,-38,-28,-19,39,-6,-16, -9,17,75,-77,-29,7,127,-41,-6,-14,-27,-15,-52,-5,-88,91,-2,82,72,-33,-22,127,65,127,38,4,49,37,113,38,127,-39,-127,-19,-88,-42,-21,-112,127,-103,-27,-116,-4,-89,67,-32,-124,-18,25,-2,23,115,-72,50,-88,-20,-67,-23,-12,20,-15,-127,-123,-99,-75,-6,1,-127,-22,14,-97,96,-127,-37,-3,-39,-127,-92,0,-79,-127,19,-16,-42,113,75,-50,36,-127,4,29,-11,13,127,-29,-118, -36,11,10,20,64,-12,53,-21,-26,3,-3,8,-41,-11,8,-25,-8,11,-24,-37,-10,13,-4,41,-6,-53,3,-13,-2,-5,-1,5,-48,-10,14,62,8,-111,-26,7,1,10,47,-44,-25,-36,-95,-27,-39,1,-7,39,18,-15,8,-19,45,-29,-2,-43,0,-12,-74,5,-47,-15,127,-48,-13,23,127,20,-3,13,-12,-2,-19,20,-33,-16,-33,0,-83,-25,8,-11,51,-11,-56,-22,-30,50,-6,23,5,1, 
  /* [0][1][][] */ -77,-1,80,-59,59,95,-34,-7,0,-21,-23,-36,-125,5,12,81,-6,52,114,9,31,-16,127,-21,39,33,69,19,-14,7,-18,-26,-95,-21,92,-9,-11,-127,-48,-127,-12,-11,104,-27,-99,127,-122,-90,91,60,0,-53,-127,97,81,-27,48,-39,30,-29,1,-23,71,-79,-57,9,-26,-73,-7,-11,-120,53,42,127,12,-66,-93,-79,-73,-53,-90,0,-75,-61,27,15,-106,52,-58,127,100,-72,127,26,-52,4, 61,127,127,107,-127,-127,61,-36,127,127,-67,-86,-108,127,-17,127,127,-127,127,127,127,-72,105,-119,-127,-127,127,127,-127,127,-29,127,-48,127,127,-105,127,86,13,-26,127,-35,-127,-127,127,-24,114,127,127,-127,127,-127,112,127,-127,127,-77,127,-127,127,-105,117,76,-127,125,127,-19,94,-75,-127,-6,-127,-21,121,127,85,30,-127,98,-127,-4,127,50,127,127,56,-127,127,-72,55,12,-8,-98,-11,-127,-44, -127,-27,61,-73,5,48,-34,-3,-38,-16,-4,127,-127,3,30,67,-16,58,38,-5,1,-15,95,-7,45,5,43,8,-28,-6,15,-24,-89,-46,92,127,-8,-71,-53,-90,-31,-57,32,-39,-84,-65,-116,-113,60,69,-15,-37,118,-13,97,-52,127,-32,38,-69,3,-38,-127,-69,-106,-2,-68,-104,2,0,-110,31,6,-89,11,127,-92,-27,-57,-5,-111,-9,-95,-78,16,23,-82,54,-62,-79,127,127,-52,-13,-76,-2, 
  /* [0][2][][] */ -13,-40,-3,3,35,-1,16,1,-20,24,36,-53,5,9,-22,-20,-6,-1,-24,-57,-19,-30,12,-32,5,-15,-8,3,14,-2,-42,-1,-48,-3,38,-28,-26,-56,-6,-10,-24,-3,37,-17,5,18,-108,-9,-35,-9,-28,-26,-23,-52,44,-13,26,-27,4,-35,-6,-8,-2,-14,-59,-39,114,57,43,18,96,-25,-52,-23,-3,-16,-22,47,-41,-3,31,7,-63,-16,3,3,45,-11,12,4,26,-42,-20,0,-18,-7, 9,-59,43,-127,-45,-20,56,127,-61,79,127,-56,-52,19,127,85,-10,-33,77,-51,-15,-46,104,-2,25,-16,52,6,-9,7,-117,-52,-58,-28,-83,-19,-100,-112,51,-19,-14,-127,-27,103,27,-21,-127,-16,74,-12,-7,-11,57,4,-39,-65,-48,-63,45,-75,127,30,67,-59,-127,-65,-29,-57,127,19,-10,21,-15,-26,27,-4,-7,-31,-5,53,-75,-11,-127,-74,60,-127,-9,11,-59,1,46,22,17,-98,-47,127, -4,9,10,6,27,0,5,1,-23,24,18,16,-15,9,3,-22,-4,14,-2,-47,-31,-15,15,-7,-4,-28,-5,-20,7,18,-53,8,-80,-7,11,-25,-19,-11,-11,24,-39,-20,-10,-22,14,-7,-87,10,-15,-22,-13,-21,-16,-72,20,-21,71,-14,10,-34,-6,10,-6,-1,-40,-24,-31,44,41,13,63,-25,-67,-36,26,-18,-41,38,83,-7,82,-1,-83,-16,0,-1,45,1,-4,-10,-2,25,-4,-7,-13,3, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0066392738372087479, 0.013617171905934811, 0.0051319445483386517, 0.0076265684328973293, 0.0079638771712779999, 0.019377507269382477, 0.0043512233532965183, 0.013409844599664211, 0.015754362568259239, 0.0098154721781611443, 0.014855512417852879, 0.0056992978788912296, 0.0046044616028666496, 0.0078138606622815132, 0.01018969714641571, 0.0064112581312656403, 0.010903636924922466, 0.013115402311086655, 0.0068997861817479134, 0.012700594030320644, 0.010890510864555836, 0.0098895570263266563, 0.005453494843095541, 0.0083516845479607582, 0.096114367246627808, 0.0057128239423036575, 0.0091619966551661491, 0.008377796970307827, 0.014662755653262138, 0.0076648094691336155, 0.0078023062087595463, 0.016618181020021439, 0.0033694230951368809, 0.0214531309902668, 0.0058698137290775776, 0.0076799122616648674, 0.011760521680116653, 0.0041826437227427959, 0.010159351862967014, 0.0060483920387923717, 0.026428299024701118, 0.0071554030291736126, 0.0082183117046952248, 0.0039767017588019371, 0.0069550410844385624, 0.0097696948796510696, 0.0037028847727924585, 0.010853930376470089, 0.0069785933010280132, 0.015560561791062355, 0.013582785613834858, 0.0085709476843476295, 0.0062312479130923748, 0.011495715938508511, 0.009831869974732399, 0.0085824774578213692, 0.007127455435693264, 0.015922104939818382, 0.021997340023517609, 0.0090695843100547791, 0.015487699769437313, 0.012181076221168041, 0.0079184258356690407, 0.0044746287167072296, 0.0064945495687425137, 0.021386953070759773, 0.0050238096155226231, 0.0047717452980577946, 0.011474278755486012, 0.018876107409596443, 0.0094078825786709785, 0.014472926966845989, 0.013359523378312588, 0.0085764992982149124, 0.0062243621796369553, 0.0097722699865698814, 0.0035342755727469921, 0.0077606150880455971, 0.0061034513637423515, 0.007181988563388586, 0.0060749407857656479, 0.011709305457770824, 0.0044938684441149235, 0.014264214783906937, 0.0037892593536525965, 0.016985079273581505, 0.0064637078903615475, 0.0095872934907674789, 0.0044036819599568844, 0.0087546948343515396, 0.0056867757812142372, 0.0092670582234859467, 0.012550846673548222, 0.0087889907881617546, 0.0047861612401902676, 0.0092091653496026993, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1122, 5419, 29, 1313, 3310, 10624, -147, 1446, 9222, -425, 9815, 3424, 2386, 378, 2838, 898, 1846, 2465, 69, 9986, 1330, 5367, -1253, 1010, -7690, 823, 2205, 1001, 4576, 1037, 2874, 3521, 2468, 6925, 2347, 2390, 3245, 1178, 2724, 2291, 18506, 1165, 1586, 640, 2468, 9127, 5488, 6355, 1265, -743, 1522, 3971, 2238, -3405, 4397, 250, 709, 10816, 843, 1603, 3335, 7041, 2616, -172, 8361, 8720, 1510, 2695, 4225, 3503, 2184, 1203, -2350, 3332, 825, 1697, 272, 8833, 3026, 5264, 1814, 696, 2659, 10176, -2, 7887, 4480, 1340, -766, 1424, 1263, 8614, 2775, 1534, 4401, 2869, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00033405839349143207, 0.00013218984531704336, 0.00039370675222016871, 0.00026448958669789135, 0.00018149577954318374, 8.7672917288728058e-05, 0.0002801972150336951, 0.00016869774844963104, 9.2886490165255964e-05, 0.000237309854128398, 7.9229896073229611e-05, 0.00015826127491891384, 0.00015867417096160352, 0.00055090588284656405, 0.00018080633890349418, 0.00014636192645411938, 0.00030655588489025831, 0.00025013144477270544, 0.0002439769305055961, 9.2231937742326409e-05, 0.00022036730661056936, 0.00013965574908070266, 0.00019978250202257186, 0.00024391777697019279, 9.1608540969900787e-05, 0.00024331598251592368, 0.00025697954697534442, 0.00031249230960384011, 0.00018575554713606834, 0.00027244511875323951, 0.00021470777573995292, 0.00016460739425383508, 0.00018299787188880146, 0.00011176989937666804, 0.00023269123630598187, 0.00027587407384999096, 0.00019556444021873176, 0.00031701504485681653, 0.00016752908413764089, 0.00020150528871454298, 5.352344669518061e-05, 0.00023190506908576936, 0.00025416590506210923, 0.00022221020481083542, 0.00015222605725284666, 9.7902484412770718e-05, 0.00013804835907649249, 0.00012844038428738713, 0.00028320407727733254, 0.00026843108935281634, 0.00027860456611961126, 0.00016767824126873165, 0.00022732889920007437, 0.00011053033813368529, 0.00015500611334573478, 0.00038733944529667497, 0.00029751920374110341, 8.121084829326719e-05, 0.00015761585382279009, 0.00018450470815878361, 0.00015776824147906154, 0.00011938851821469143, 0.00025293015642091632, 0.00040207855636253953, 0.00010896666935877874, 9.954540291801095e-05, 0.00028279767138883471, 0.00019341001461725682, 0.00017593255324754864, 0.00013762046000920236, 0.00022217436344362795, 0.00021472251683007926, 0.00019276035891380161, 0.00019214885833207518, 0.00034414566471241415, 0.00034268098534084857, 0.00027394102653488517, 9.5545939984731376e-05, 0.00020154009689576924, 0.00015149287355598062, 0.00024946875055320561, 0.00017950613982975483, 0.00016230008623097092, 8.9484827185515314e-05, 0.00017484613636042923, 9.7594354883767664e-05, 0.00014883064432069659, 0.00032497255597263575, 0.00029204619931988418, 0.0003557685122359544, 0.00019804408657364547, 0.00010511405707802624, 0.00018476555123925209, 0.00022920865740161389, 0.00012496822455432266, 0.00022538971097674221, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 34,-9,-16,59,-127,-31,89,46,68,71,-15,25,-8,2,20,71, 
  /* [1][0][][] */ -8,34,-98,13,127,111,7,-2,-23,15,-51,20,-64,76,-67,-39, 
  /* [2][0][][] */ -49,53,89,9,64,83,-2,41,36,-13,46,-19,69,-127,-3,13, 
  /* [3][0][][] */ 127,-35,10,24,42,33,-17,14,20,30,-59,-23,-39,77,-50,61, 
  /* [4][0][][] */ -82,-24,7,50,-119,-25,-78,-38,-23,27,-7,-61,-8,12,-22,127, 
  /* [5][0][][] */ -94,11,6,46,127,38,-26,6,-33,17,-30,8,-64,63,-99,-38, 
  /* [6][0][][] */ -127,16,-47,37,-12,-73,56,17,10,-21,-44,37,2,11,-45,3, 
  /* [7][0][][] */ -7,102,100,-109,97,35,127,-19,60,33,-10,54,95,61,-21,-16, 
  /* [8][0][][] */ -44,-28,-71,64,-62,52,-58,-66,7,-42,72,17,127,30,-76,4, 
  /* [9][0][][] */ 3,-127,-11,59,-26,-56,-10,79,61,64,17,93,-69,1,-1,-37, 
  /* [10][0][][] */ -46,-76,-92,70,-127,110,35,-77,47,-123,39,-59,39,98,-64,59, 
  /* [11][0][][] */ -45,-109,-25,32,-12,90,32,-25,15,21,33,-90,13,127,-121,99, 
  /* [12][0][][] */ -52,-83,-110,94,-104,-127,-23,76,116,91,-24,126,-45,-61,-64,-9, 
  /* [13][0][][] */ -61,-29,-35,-7,-30,-1,34,26,-23,127,-3,-20,50,34,26,-11, 
  /* [14][0][][] */ -105,-34,-46,-34,-44,88,-19,-93,113,-84,61,-9,127,-73,-72,-83, 
  /* [15][0][][] */ 7,-127,98,-58,-48,-37,-7,60,30,-40,-95,-34,75,-35,-26,-56, 
  /* [16][0][][] */ -6,-32,24,-35,40,31,-33,-25,70,-127,43,-16,-3,-5,-81,-89, 
  /* [17][0][][] */ 2,3,14,-60,40,22,-45,0,94,-67,37,78,127,-75,-59,-120, 
  /* [18][0][][] */ 58,13,-31,-127,5,-5,119,-48,29,52,8,63,-18,74,-23,-113, 
  /* [19][0][][] */ -52,-29,-20,-55,-117,21,-18,-17,12,-37,17,-127,-6,-21,-6,-14, 
  /* [20][0][][] */ 28,65,48,-83,65,2,-35,84,-126,-127,43,-80,-16,95,-18,-9, 
  /* [21][0][][] */ 35,-81,-96,-24,62,32,55,26,-127,-61,-46,25,108,-94,-13,8, 
  /* [22][0][][] */ 53,-9,78,-2,12,-5,57,23,28,127,30,24,-14,21,90,-10, 
  /* [23][0][][] */ -101,-69,-18,69,78,48,2,-10,-35,-1,-6,-85,25,60,46,127, 
  /* [24][0][][] */ 33,-7,45,33,18,-109,21,-65,26,127,-110,87,2,-63,97,-68, 
  /* [25][0][][] */ 111,-43,87,127,41,18,-4,41,-114,45,66,-48,10,23,58,0, 
  /* [26][0][][] */ -32,19,13,49,-58,106,-9,30,-59,-37,-82,25,4,31,42,-127, 
  /* [27][0][][] */ 36,-10,1,-81,-49,6,-63,16,-109,-21,-74,-42,-72,41,-11,127, 
  /* [28][0][][] */ -74,35,25,-3,28,-13,-127,-7,6,-23,5,4,-25,-36,-79,-38, 
  /* [29][0][][] */ -30,-111,-37,101,-34,7,127,7,68,55,-111,58,35,-31,-46,81, 
  /* [30][0][][] */ 23,-48,-52,20,-127,10,90,-49,18,7,-27,-27,-31,84,-23,69, 
  /* [31][0][][] */ -127,-10,4,87,-32,2,-58,2,-12,-55,13,-17,-29,-41,-8,96, 
  /* [32][0][][] */ -106,-82,-98,-8,-91,-26,5,-27,127,59,-55,-78,30,57,13,-15, 
  /* [33][0][][] */ -18,6,-92,46,-127,-85,69,-2,-103,9,-49,-84,-31,90,57,55, 
  /* [34][0][][] */ 59,51,9,37,-53,-43,36,24,28,-127,-19,65,-13,3,50,98, 
  /* [35][0][][] */ 27,-10,-47,-17,-127,-2,100,-40,18,58,-10,-12,16,83,13,48, 
  /* [36][0][][] */ -18,13,-59,50,127,-14,47,64,-98,15,-70,-69,28,-21,21,38, 
  /* [37][0][][] */ -115,43,-21,-47,44,-95,-48,-40,-3,-16,-30,36,47,-84,16,-127, 
  /* [38][0][][] */ 61,100,31,-103,-126,-45,-82,-29,-43,-86,92,60,-52,-127,89,7, 
  /* [39][0][][] */ 47,-52,18,127,-6,67,104,-95,-26,68,-4,-63,-3,115,96,111, 
  /* [40][0][][] */ 112,71,89,98,-24,-68,3,-3,-89,99,-9,3,-57,-5,127,-10, 
  /* [41][0][][] */ -23,-15,-1,67,-90,113,-7,48,-41,29,-110,2,4,39,40,-127, 
  /* [42][0][][] */ 19,-84,13,-2,127,20,48,8,-43,-83,-76,0,8,-8,6,38, 
  /* [43][0][][] */ -33,-84,-15,17,54,3,2,58,-90,-50,-93,-59,127,-6,-15,42, 
  /* [44][0][][] */ -53,-63,-74,-109,23,89,37,7,-26,-127,-66,51,-64,36,8,108, 
  /* [45][0][][] */ -11,-40,-85,-8,-127,68,-68,-96,110,-40,14,-70,-35,23,-17,44, 
  /* [46][0][][] */ 15,-67,-23,-5,116,-78,-25,127,-45,-30,73,96,-38,-69,63,-111, 
  /* [47][0][][] */ -66,-37,-10,60,-22,1,27,48,1,127,89,80,-70,51,-18,74, 
  /* [48][0][][] */ 41,4,-84,-93,32,-63,8,64,36,-76,13,38,-50,2,-50,-127, 
  /* [49][0][][] */ 70,45,-3,18,6,-31,36,39,-30,127,-47,48,-32,-10,60,80, 
  /* [50][0][][] */ 1,7,5,5,-127,-11,-21,-51,50,17,26,51,-21,-60,8,3, 
  /* [51][0][][] */ 18,-18,-1,-96,11,107,67,-87,36,3,10,-80,88,127,-64,5, 
  /* [52][0][][] */ 17,-27,13,-90,82,-104,11,-36,36,4,127,-43,38,14,-49,86, 
  /* [53][0][][] */ -35,-69,83,-55,-44,-127,38,-126,-4,122,-117,103,-46,-40,51,-93, 
  /* [54][0][][] */ 58,56,36,6,-127,-31,-94,-112,2,6,42,51,-78,-48,69,0, 
  /* [55][0][][] */ 1,18,-41,66,-38,19,34,-17,6,127,29,61,-14,2,0,46, 
  /* [56][0][][] */ 38,-76,-55,73,-76,43,-40,30,127,-7,35,44,-18,-29,42,91, 
  /* [57][0][][] */ 40,10,115,-91,82,12,-37,-16,76,-20,60,127,73,-66,99,-82, 
  /* [58][0][][] */ 97,-69,18,-60,37,8,-3,119,58,103,-21,42,62,13,127,-10, 
  /* [59][0][][] */ -28,43,30,-49,6,-74,6,23,15,16,-91,-93,-127,-55,64,-4, 
  /* [60][0][][] */ 72,-29,47,13,16,-14,29,-38,59,127,-17,70,17,-19,-15,-37, 
  /* [61][0][][] */ 83,54,21,-21,-92,-127,-43,-51,-56,-10,-12,13,-61,-70,101,75, 
  /* [62][0][][] */ -6,80,-33,33,-47,127,-55,14,-38,9,-48,17,-38,30,68,-95, 
  /* [63][0][][] */ 19,-17,-72,-127,-12,-40,71,-7,11,-96,-33,21,-48,71,10,-35, 
  /* [64][0][][] */ -44,29,-1,-5,54,-60,23,91,-127,-17,-67,-31,-36,87,59,62, 
  /* [65][0][][] */ -36,10,-40,-23,58,29,-43,-67,-127,-40,15,-2,-88,87,-31,41, 
  /* [66][0][][] */ -32,80,-14,32,-68,127,-28,29,-75,19,-19,66,-50,50,69,-89, 
  /* [67][0][][] */ 20,-30,-27,-12,22,-117,74,-113,2,26,1,117,-50,-1,-19,-127, 
  /* [68][0][][] */ 7,-127,-31,64,-1,-10,-9,81,35,61,70,45,-94,46,-3,-16, 
  /* [69][0][][] */ 29,57,60,-127,25,8,-45,101,28,95,45,61,96,-109,36,-123, 
  /* [70][0][][] */ 52,12,57,-38,96,2,-90,-59,-127,-89,-25,25,-28,55,-98,-20, 
  /* [71][0][][] */ -49,-57,15,-80,68,-32,57,48,-127,103,-96,-31,22,94,-5,74, 
  /* [72][0][][] */ 35,42,73,-27,-21,7,-71,-88,-22,81,-51,49,35,93,-127,20, 
  /* [73][0][][] */ -4,-12,-27,-56,32,-115,38,-50,73,92,107,-9,8,-32,-60,127, 
  /* [74][0][][] */ 11,-2,-26,90,-64,-5,58,16,51,51,25,84,127,16,-32,7, 
  /* [75][0][][] */ -17,40,-29,25,-53,127,-28,15,-26,29,-35,39,-16,40,25,-63, 
  /* [76][0][][] */ -57,53,-56,46,-74,-2,-21,22,64,20,-37,-42,28,-37,-127,36, 
  /* [77][0][][] */ 127,102,-117,73,70,105,52,56,60,-2,100,-32,64,0,57,36, 
  /* [78][0][][] */ 9,-33,-10,-65,64,-119,17,-47,51,43,127,-28,-3,-33,-38,127, 
  /* [79][0][][] */ -32,63,-3,24,-5,-45,-28,-7,-127,-5,47,2,101,30,-74,-42, 
  /* [80][0][][] */ -79,21,46,28,63,40,1,-127,-60,57,-51,-50,-8,-45,5,48, 
  /* [81][0][][] */ 85,69,-33,-32,16,-26,84,127,-97,127,-68,-46,-57,15,119,113, 
  /* [82][0][][] */ 97,78,-15,-23,21,-52,80,-124,54,45,-78,66,127,38,13,-77, 
  /* [83][0][][] */ -16,-59,-15,47,-7,15,-51,-97,62,-42,113,2,46,-84,-45,-127, 
  /* [84][0][][] */ -127,-108,-55,-37,-18,87,61,17,101,69,89,107,49,87,-74,5, 
  /* [85][0][][] */ 127,-1,56,-35,85,-13,-9,73,10,77,-72,-13,-10,40,88,-2, 
  /* [86][0][][] */ -67,72,-49,-7,18,82,7,28,87,35,127,-10,-24,50,7,-14, 
  /* [87][0][][] */ 9,-60,27,-44,43,-127,28,-36,47,-6,58,-39,32,-32,-45,65, 
  /* [88][0][][] */ -85,48,21,-1,95,-26,41,27,-48,-69,76,-69,40,127,68,-105, 
  /* [89][0][][] */ -23,30,-25,34,-27,127,-26,34,-45,0,-43,16,4,50,21,-76, 
  /* [90][0][][] */ 64,-65,23,27,124,7,60,33,-13,-109,-127,-32,-5,-13,-78,36, 
  /* [91][0][][] */ -28,55,-17,-50,-2,-75,-105,43,-61,36,-91,-127,-116,-78,-32,11, 
  /* [92][0][][] */ 43,58,42,33,-127,-84,32,15,-36,20,-2,-36,-28,-88,22,11, 
  /* [93][0][][] */ -32,-127,-93,81,-68,-57,11,86,79,58,-8,26,-52,88,-21,-28, 
  /* [94][0][][] */ 105,-1,127,-9,35,-52,6,38,37,85,-2,44,-4,38,82,-31, 
  /* [95][0][][] */ -41,-53,-31,-5,127,-1,18,68,-38,-9,-89,-47,31,-6,-53,22, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0049283979460597038, 0.0019502104260027409, 0.0058083962649106979, 0.0039020420517772436, 0.0026776259765028954, 0.0012934475671499968, 0.0041337786242365837, 0.0024888152256608009, 0.0013703639851883054, 0.0035010566934943199, 0.0011688867816701531, 0.0023348450195044279, 0.0023409363348037004, 0.0081275710836052895, 0.0026674545370042324, 0.0021592925768345594, 0.0045226505026221275, 0.0036902150604873896, 0.0035994169302284718, 0.0013607073342427611, 0.0032511015888303518, 0.002060355618596077, 0.0029474119655787945, 0.0035985440481454134, 0.0013515102909877896, 0.003589665750041604, 0.0037912458647042513, 0.0046102311462163925, 0.0027404706925153732, 0.004019410815089941, 0.003167605958878994, 0.0024284699466079473, 0.002699786564335227, 0.00164895283523947, 0.0034329178743064404, 0.0040699988603591919, 0.0028851823881268501, 0.0046769557520747185, 0.0024715738836675882, 0.0029728282243013382, 0.00078963692067191005, 0.0034213194157928228, 0.0037497356534004211, 0.0032782901544123888, 0.002245806623250246, 0.0014443654799833894, 0.0020366415847092867, 0.001894894172437489, 0.0041781389154493809, 0.0039601917378604412, 0.0041102818213403225, 0.002473774366080761, 0.0033538066782057285, 0.0016306655015796423, 0.0022868211381137371, 0.005714458879083395, 0.0043893316760659218, 0.0011981120333075523, 0.0023253229446709156, 0.0027220170013606548, 0.0023275711573660374, 0.0017613511299714446, 0.0037315045483410358, 0.0059319064021110535, 0.0016075965249910951, 0.0014686036156490445, 0.0041721430607140064, 0.0028533979784697294, 0.0025955510791391134, 0.0020303288474678993, 0.0032777613960206509, 0.0031678234227001667, 0.0028438135050237179, 0.0028347920160740614, 0.0050772163085639477, 0.0050556077621877193, 0.004041480366140604, 0.0014095990918576717, 0.0029733418487012386, 0.0022349900100380182, 0.0036804380360990763, 0.0026482725515961647, 0.002394429873675108, 0.0013201788533478975, 0.002579523017629981, 0.0014398195780813694, 0.002195713808760047, 0.0047943536192178726, 0.004308587871491909, 0.0052486895583570004, 0.0029217647388577461, 0.0015507584903389215, 0.002725865226238966, 0.0033815389033406973, 0.0018436691025272012, 0.0033251976128667593, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -5054, 9206, -22094, 3681, 11631, -12548, -40299, -11015, -4523, 4003, -14004, -13159, 9720, -12172, -5545, -1321, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00015651229477953166, 0.00012824780424125493, 0.00013807325740344822, 0.00014629795623477548, 9.6644034783821553e-05, 0.00014804913371335715, 0.00012868116027675569, 0.00026048175641335547, 9.8662581876851618e-05, 0.00012824501027353108, 0.00021351240866351873, 0.00011008667934220284, 0.0001361951872240752, 9.5046030764933676e-05, 9.4561903097201139e-05, 0.00011864460248034447, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 19,32,21,-30,75,60,-30,50,-10,126,6,52,-32,37,-15,46,26,84,43,-67,-66,67,-18,52,52,49,41,50,-55,-43,-7,96,-36,14,-77,44,47,-127,-33,12,15,-32,57,7,3,-48,-67,-21, 
  /* [1][0][][] */ -54,6,-80,-42,12,89,-51,11,-12,-27,-38,32,57,-10,-29,-32,-31,-27,1,18,-60,37,-104,-40,-61,-36,45,70,-30,-25,45,-39,1,-57,-34,48,10,-49,127,-36,-24,32,-45,-13,30,61,30,17, 
  /* [2][0][][] */ 4,-5,75,-32,-21,-85,32,26,111,70,-56,20,112,-49,127,92,-60,-10,-36,20,88,-90,-45,-103,18,-30,38,-77,53,38,-33,29,39,-22,79,41,-72,6,3,-26,35,41,67,-25,9,-86,98,-73, 
  /* [3][0][][] */ 39,6,-19,-32,36,106,6,-12,36,-62,24,-31,-48,7,15,40,-31,-68,31,-127,-10,6,-22,-7,-41,82,121,66,-20,-47,23,43,61,-40,92,52,-29,-54,1,39,18,16,-20,5,11,22,-7,-25, 
  /* [4][0][][] */ 97,5,-1,-45,70,93,47,24,55,-11,-105,34,44,-18,13,-23,-102,-118,-10,-107,-19,22,-27,-33,-84,127,-111,123,-62,-48,32,91,36,-46,21,-33,-6,28,-19,36,-57,-22,7,45,-50,122,-36,-64, 
  /* [5][0][][] */ -1,-4,-58,9,-28,51,16,-23,55,47,37,94,44,-18,28,-6,-33,127,-12,25,12,-8,-67,-16,28,11,-70,-34,-12,25,22,-14,-41,6,45,2,-51,5,-77,11,82,-18,24,40,-23,6,-40,20, 
  /* [6][0][][] */ 62,3,9,62,8,-28,106,-41,11,55,127,86,42,55,-51,59,15,-50,-67,96,62,-70,-12,71,-82,68,104,-12,120,40,-25,0,93,-70,-110,-5,96,28,-4,-11,14,38,49,-36,61,122,41,-2, 
  /* [7][0][][] */ -76,0,-28,24,-58,-59,24,45,77,127,-50,-62,-80,-2,-24,-14,-61,93,5,125,-47,41,26,26,-14,-96,-32,-72,22,45,-3,-2,-22,20,5,-16,10,-45,127,7,5,32,27,-26,52,66,-29,11, 
  /* [8][0][][] */ -20,-86,51,-57,50,-46,66,-31,-31,-112,37,-1,-35,9,27,25,7,11,-31,89,6,30,-12,37,57,-16,-57,-31,-127,-20,-42,-96,-3,-60,18,83,-11,29,95,18,10,3,50,111,-10,-56,-31,63, 
  /* [9][0][][] */ 3,-32,27,-55,43,65,-27,38,18,-16,-30,-21,15,-36,107,-17,20,-104,44,55,-67,43,49,-36,-18,-64,-18,67,42,67,-34,-40,-62,25,-29,127,-17,-31,-52,-23,-25,-12,28,96,50,77,-58,19, 
  /* [10][0][][] */ -13,29,-28,-4,14,28,-76,-45,43,39,59,-5,-35,-10,50,-55,-58,127,2,46,-2,-18,17,24,-54,49,-3,92,42,3,-34,-22,69,10,-10,18,-21,-54,-37,24,-84,-3,21,-14,26,34,31,23, 
  /* [11][0][][] */ -31,54,-22,37,26,55,0,7,19,24,-127,-77,78,17,-12,-48,8,29,-42,-46,-9,-13,111,-4,44,9,-25,39,-10,24,-6,40,21,-2,-48,-4,38,87,109,18,29,-32,67,-5,-63,-16,90,0, 
  /* [12][0][][] */ -48,5,28,19,-66,-51,0,19,-30,-49,-121,3,59,-86,24,34,35,98,94,-127,-26,35,-31,-72,0,-29,36,-36,13,2,-15,71,63,75,44,-43,-58,-32,29,2,-32,3,58,7,37,-11,-40,-53, 
  /* [13][0][][] */ -65,-126,-44,-101,29,25,60,4,-114,36,113,-68,59,42,127,10,117,21,-10,-91,69,-74,114,-6,-76,11,-26,6,-51,-92,-113,21,41,-39,-82,60,35,-50,73,-73,5,68,58,45,59,-32,97,-54, 
  /* [14][0][][] */ 69,15,-41,-4,-26,10,-74,-26,-16,62,48,35,-8,-69,15,-29,50,-113,19,22,79,-46,23,-9,-2,115,-70,-1,-59,-38,-96,-7,127,41,75,-9,-65,5,-26,49,-4,-46,110,-28,-56,-44,-50,64, 
  /* [15][0][][] */ -64,18,39,22,90,-3,-1,30,21,90,-24,68,60,-11,-35,-26,5,39,-7,-41,28,-43,-58,-68,49,-64,-52,65,-25,12,16,2,-63,0,127,-9,-96,24,69,-15,-49,-31,21,3,-33,-44,-15,6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0066517721861600876, 0.0054505318403244019, 0.0058681131340563297, 0.0062176627106964588, 0.0041073714382946491, 0.0062920879572629929, 0.0054689492098987103, 0.011070474050939083, 0.0041931597515940666, 0.0054504130966961384, 0.0090742772445082664, 0.0046786838211119175, 0.0057882955297827721, 0.0040394561365246773, 0.0040188808925449848, 0.0050423955544829369, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 11638, 113, 18860, 774, 13493, -1960, 44753, 1013, 8253, 44811, 10974, 24109, 2350, 9279, 33759, 30913, 1722, -2917, 5495, 47016, 2037, 17205, 1076, 18662, 13017, 39878, -2780, -310, -5633, 16624, 20688, -206, 236, 489, 1928, 15211, 8665, 30626, 4626, 19497, 24318, 3277, 658, 18820, 4118, 2387, 39527, 23716, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.5124876932241023e-05, 0.00015866616740822792, 7.1151538577396423e-05, 8.6379041022155434e-05, 0.00010747886699391529, 8.6839958385098726e-05, 5.0381910114083439e-05, 0.00018129817908629775, 9.7490927146282047e-05, 4.6374425437534228e-05, 4.0588776755612344e-05, 0.00012123744818381965, 7.394210115307942e-05, 0.00013285770546644926, 4.9307152949040756e-05, 6.7493630922399461e-05, 6.9222020101733506e-05, 7.5021445809397846e-05, 0.00013250240590423346, 5.1705479563679546e-05, 5.1106911996612325e-05, 5.2895080443704501e-05, 9.6953051979653537e-05, 0.00014503848797176033, 6.7024171585217118e-05, 5.1817645726259798e-05, 8.7430897110607475e-05, 4.1747956856852397e-05, 0.00019009951211046427, 8.0881363828666508e-05, 7.8144672443158925e-05, 0.00021160703909117728, 0.00012752029579132795, 0.00018746037676464766, 9.0730572992470115e-05, 7.7629912993870676e-05, 9.8026052000932395e-05, 5.4830885346746072e-05, 7.3349714512005448e-05, 9.10334856598638e-05, 5.6737822887953371e-05, 0.00020911214232910424, 0.00027708121342584491, 6.0508515161927789e-05, 0.00015253089077305049, 5.4855452617630363e-05, 5.209634400671348e-05, 7.3964838520623744e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -96,77,-127,79,-108,57,-73,47,-85,-122,72,-52,47,-68,-26,-96,79,78,84,-115,75,-54,80,-85,-77,-50,49,127,-97,-44,-93,84,100,-104,74,-108,-80,-121,84,-46,3,-100,107,-127,87,70,-73,-40, -127,99,-57,97,-71,97,-65,127,-101,-126,110,-80,88,-92,-49,-103,113,107,127,-127,127,-108,90,-117,-127,-87,61,120,53,-78,-99,80,95,-127,106,-111,-124,-127,100,-77,-94,94,118,-121,-49,109,-123,-73, -31,37,-22,32,-19,60,-51,114,-45,-56,54,-38,23,-37,-16,-5,57,48,62,-40,34,-52,53,-43,-59,-27,22,49,127,-10,-44,58,58,-86,63,-34,-25,-56,50,-74,-127,-31,60,-84,-83,62,-40,-35, 
  /* [0][1][][] */ -100,98,-70,108,-78,100,-124,45,-114,-127,95,-83,90,-94,-84,-86,101,97,-50,-84,107,-97,107,-62,-76,-84,109,124,-117,-111,-106,127,114,46,95,-115,-82,-69,110,-85,-106,-127,88,-121,127,73,-96,-91, -93,127,-118,127,-127,127,-123,118,-127,-121,127,-127,127,-127,-127,-127,127,127,-52,-106,127,-127,127,-127,-96,-127,127,126,34,-124,-127,97,127,44,127,-127,-127,-98,127,-127,-101,114,127,-109,-61,127,-127,-127, -60,74,-106,42,-52,47,-52,70,-35,-65,68,-49,52,-23,-59,-10,63,54,-63,-40,59,-65,49,-45,-96,-32,71,57,99,-127,-56,124,70,18,71,-56,-32,-42,78,-64,-33,-51,27,-117,-102,85,-20,-70, 
  /* [0][2][][] */ -31,40,-12,48,-24,57,-123,32,-58,-87,44,-64,42,-43,-57,-99,81,39,-84,-40,38,-62,29,-38,-20,-32,33,18,-92,-75,-26,86,16,59,61,-53,-37,-52,38,-63,-118,-62,49,-123,67,41,-64,-56, -42,63,-61,62,-51,40,-127,61,-47,-81,62,-85,67,-78,-66,-89,84,55,-106,-53,53,-63,38,-59,-42,-63,51,64,30,-101,-49,76,26,67,79,-45,-51,-58,44,-70,-62,42,50,-73,-43,78,-88,-78, -38,22,-80,16,-28,10,-71,44,9,-12,24,-39,34,21,-41,-13,48,12,-88,-22,38,-16,27,-9,-47,-14,18,32,70,-34,-4,49,-12,35,43,8,2,-28,27,-42,6,-5,6,-69,-69,62,-37,-51, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0036178070586174726, 0.006743311882019043, 0.0030239403713494539, 0.0036711092106997967, 0.0045678517781198025, 0.0036906981840729713, 0.0021412312053143978, 0.007705172523856163, 0.0041433642618358135, 0.001970913028344512, 0.0017250230303034186, 0.0051525915041565895, 0.0031425391789525747, 0.0056464523077011108, 0.0020955540239810944, 0.0028684791177511215, 0.0029419357888400555, 0.0031884114723652601, 0.0056313523091375828, 0.0021974828559905291, 0.0021720437798649073, 0.0022480408661067486, 0.0041205044835805893, 0.0061641354113817215, 0.0028485271614044905, 0.0022022498305886984, 0.0037158129271119833, 0.0017742881318554282, 0.0080792289227247238, 0.0034374578390270472, 0.0033211484551429749, 0.0089932987466454506, 0.0054196123965084553, 0.0079670660197734833, 0.0038560491520911455, 0.00329927122220397, 0.0041661071591079235, 0.002330312505364418, 0.0031173627357929945, 0.0038689230568706989, 0.0024113573599606752, 0.0088872658088803291, 0.011775950901210308, 0.0025716118980199099, 0.0064825625158846378, 0.0023313567508012056, 0.0022140946239233017, 0.0031435056589543819, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1101, -1022, 633, -1496, 2424, -454, 3113, -3090, 977, 505, 1817, 3212, 176, -453, 359, 4265, -1116, 2338, 4187, 838, -641, 2039, -379, 5326, 2101, 1070, 1001, -676, 4561, -104, 2479, -1476, -592, 4089, -1492, 2246, 1424, 900, 80, 2866, 1214, 5980, -3280, 1131, 5930, -82, 1679, 2212, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00035205335007049143, 0.00034681073157116771, 0.00035878291237168014, 0.00026718078879639506, 0.00030651711858808994, 0.00028497623861767352, 0.00023175640671979636, 0.00019155100744683295, 0.00032282873871736228, 0.00039653066778555512, 0.00024997687432914972, 0.0002239573368569836, 0.00038681901060044765, 0.00033284825622104108, 0.00031150146969594061, 0.00019222374248784035, 0.00031139425118453801, 0.00032251462107524276, 0.00021839841792825609, 0.00033386674476787448, 0.00038802679046057165, 0.00026679167058318853, 0.00027170692919753492, 0.00016345686162821949, 0.0002222726761829108, 0.00033861867268569767, 0.00034332781797274947, 0.00036319595528766513, 0.00018222066864836961, 0.00034065591171383858, 0.00019720026466529816, 0.00023032426543068141, 0.00023332763521466404, 0.00020768100512214005, 0.00025410979287698865, 0.00024740296066738665, 0.00030672291177324951, 0.0003267900028731674, 0.00031398335704579949, 0.00027377164224162698, 0.00039135626866482198, 0.00015423768491018564, 0.00015650811837986112, 0.00031235592905431986, 0.00015052489470690489, 0.00027753377798944712, 0.00032098134397529066, 0.00030363484984263778, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 48,40,127,-25,68,98,-70,-38, 
  /* [1][0][][] */ 15,-79,-127,3,44,20,23,-1, 
  /* [2][0][][] */ -127,-23,-62,-27,68,36,-84,-48, 
  /* [3][0][][] */ 30,65,127,-83,1,-103,3,-6, 
  /* [4][0][][] */ -127,19,-49,-21,48,16,-45,-54, 
  /* [5][0][][] */ -105,23,-48,1,10,43,-98,-127, 
  /* [6][0][][] */ -23,-127,-116,29,86,9,4,32, 
  /* [7][0][][] */ -70,-127,-120,-85,-108,-87,20,120, 
  /* [8][0][][] */ 75,36,-1,6,81,-58,-127,15, 
  /* [9][0][][] */ -36,55,-40,81,-46,-24,127,-39, 
  /* [10][0][][] */ -23,109,29,48,127,-27,1,51, 
  /* [11][0][][] */ -74,-45,-39,-14,-74,104,127,0, 
  /* [12][0][][] */ 59,38,-127,33,-5,-27,-83,-5, 
  /* [13][0][][] */ 75,-47,-77,0,16,-127,-32,-17, 
  /* [14][0][][] */ 8,-96,74,10,127,-107,-69,20, 
  /* [15][0][][] */ -41,-49,-1,127,81,76,-79,21, 
  /* [16][0][][] */ 103,50,-21,21,64,-127,-112,-24, 
  /* [17][0][][] */ 59,127,56,68,40,66,24,-87, 
  /* [18][0][][] */ 27,-9,0,-8,127,-13,43,-7, 
  /* [19][0][][] */ 16,118,26,2,-127,19,26,-39, 
  /* [20][0][][] */ -45,8,58,-127,34,48,-10,95, 
  /* [21][0][][] */ -30,64,42,-127,32,50,-8,126, 
  /* [22][0][][] */ -70,-66,-86,25,-110,127,104,-26, 
  /* [23][0][][] */ 112,46,-127,24,33,-54,-99,-16, 
  /* [24][0][][] */ -53,41,17,13,-12,77,-127,100, 
  /* [25][0][][] */ -102,-56,-127,17,-49,-73,74,95, 
  /* [26][0][][] */ 36,8,-20,-22,93,-22,127,-33, 
  /* [27][0][][] */ 127,-73,24,94,0,34,-28,93, 
  /* [28][0][][] */ 44,25,81,-4,127,-34,61,-39, 
  /* [29][0][][] */ -9,-7,-22,-49,-72,7,127,-48, 
  /* [30][0][][] */ 37,-127,-55,-81,-119,-9,23,-65, 
  /* [31][0][][] */ 14,32,-14,-16,-127,13,-35,2, 
  /* [32][0][][] */ 37,-42,-44,73,-9,-96,127,-126, 
  /* [33][0][][] */ 60,127,57,51,62,17,-21,-9, 
  /* [34][0][][] */ -116,-26,127,-5,-42,109,99,1, 
  /* [35][0][][] */ -48,86,127,-11,-70,-88,-27,29, 
  /* [36][0][][] */ -95,-2,74,-31,-35,127,91,29, 
  /* [37][0][][] */ -11,-71,-9,-127,-32,-75,55,40, 
  /* [38][0][][] */ 42,-9,91,-41,51,51,-127,12, 
  /* [39][0][][] */ -11,73,-127,-41,-18,-2,17,64, 
  /* [40][0][][] */ 64,-53,18,36,21,8,4,127, 
  /* [41][0][][] */ -15,86,127,-23,20,43,-36,21, 
  /* [42][0][][] */ 65,-127,-103,-37,-122,-3,25,-105, 
  /* [43][0][][] */ -5,-92,26,-74,127,-58,25,31, 
  /* [44][0][][] */ -3,115,127,2,7,30,-62,10, 
  /* [45][0][][] */ -31,36,17,85,-111,52,-127,17, 
  /* [46][0][][] */ -44,-36,69,51,-120,-127,-30,2, 
  /* [47][0][][] */ -22,54,40,-102,-127,24,-10,52, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0034808272030204535, 0.0034289923496544361, 0.0035473636817187071, 0.0026416738983243704, 0.0030306007247418165, 0.0028176214545965195, 0.0022914253640919924, 0.001893906039185822, 0.003191877156496048, 0.0039205839857459068, 0.0024715750478208065, 0.0022143144160509109, 0.0038245627656579018, 0.0032909421715885401, 0.0030798818916082382, 0.0019005574285984039, 0.0030788220465183258, 0.003188771428540349, 0.0021593521814793348, 0.0033010123297572136, 0.0038365044165402651, 0.0026378266047686338, 0.0026864248793572187, 0.0016161331441253424, 0.0021976577118039131, 0.0033479956910014153, 0.0033945559989660978, 0.0035909966100007296, 0.0018016549292951822, 0.0033681383356451988, 0.0019497614121064544, 0.0022772655356675386, 0.0023069605231285095, 0.002053386764600873, 0.0025124382227659225, 0.0024461261928081512, 0.0030326354317367077, 0.0032310429960489273, 0.0031044208444654942, 0.0027068392373621464, 0.0038694236427545547, 0.0015249811112880707, 0.0015474293613806367, 0.0030883301515132189, 0.0014882719842717052, 0.0027440360281616449, 0.0031736115925014019, 0.0030021029524505138, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2733, 2163, 23069, -3549, 4405, -11350, 467, -14445, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.9579738161992282e-05, 0.00014415095211006701, 0.00016109783609863371, 0.00010681176354410127, 0.00016645163123030216, 0.00017261605535168201, 8.8618762674741447e-05, 8.4577637608163059e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -52,-42,-14,-73,8,-4,79,82,-116,-82,-30,29,-51,-16,-79,23,-86,3,21,127,56,-8,11,86,74,93,22,-2,-101,-76,-87,-80,-57,117,32,-43,43,-38,76,17,53,9,5,-117,32,-33,-38,-100, 
  /* [1][0][][] */ 0,52,-27,-24,-50,64,-22,-54,-42,76,-20,27,54,31,-66,-13,-22,-127,62,-61,103,20,-54,18,56,10,-79,49,36,-19,65,10,-36,-14,-5,-11,5,106,-23,-18,77,53,-16,9,101,16,-29,62, 
  /* [2][0][][] */ -26,-29,111,22,91,-35,-12,27,-35,0,-8,34,14,-40,-50,-127,-55,-107,-35,7,-103,22,-40,-39,-51,26,0,-44,-35,7,-30,-19,-3,-6,13,-2,19,-27,-54,8,39,-24,31,-46,-39,-39,-54,-56, 
  /* [3][0][][] */ 49,15,59,10,19,-26,30,67,-55,-19,39,5,-60,32,-29,42,61,23,-41,19,-113,-63,127,-15,7,20,-48,-33,-41,57,107,-80,6,-104,-27,33,7,-76,-29,76,-55,-40,48,-4,-97,-68,53,-17, 
  /* [4][0][][] */ 23,-16,64,-15,11,-7,-4,-4,-59,-4,-30,14,46,-65,30,-94,39,40,-9,-36,-1,40,19,6,-7,14,50,-22,26,10,-127,-22,-17,-19,-4,28,53,-7,28,-1,-31,-6,-60,19,-27,-86,2,16, 
  /* [5][0][][] */ 33,-54,50,39,21,17,26,2,-84,-4,-52,26,30,5,14,-49,83,68,-23,-24,74,-79,127,-91,-15,53,4,51,12,23,-34,-44,-22,-55,-37,5,43,19,72,4,-93,39,28,26,40,-17,76,0, 
  /* [6][0][][] */ -58,37,-127,106,75,15,40,19,-7,3,35,-86,-84,-19,-32,37,-114,29,-8,85,17,40,-83,-81,12,-25,23,78,-33,-32,-45,25,31,57,-52,-24,-18,-6,95,7,54,93,-122,-48,-22,109,-60,-21, 
  /* [7][0][][] */ 23,76,-82,9,4,61,112,76,55,73,-100,-20,-40,15,-55,-35,35,38,116,106,84,5,121,39,127,86,-42,92,-66,31,5,-68,28,-69,-20,32,-12,83,-49,84,-78,40,-3,-78,73,-32,67,-41, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0042321388609707355, 0.0061264154501259327, 0.0068466579541563988, 0.0045394999906420708, 0.0070741944946348667, 0.0073361820541322231, 0.0037662973627448082, 0.0035945496056228876, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -367, 13299, -271, -534, 2037, -750, 5805, -3242, -3982, 258, -598, 296, -1365, -1115, -3162, 6119, 4742, 4899, -658, -4570, -9882, -195, 17743, -8173, -2282, 833, 5171, -6027, -417, -1633, -7757, 8656, 3009, 946, 2643, 19, 181, -221, 11958, -769, 5997, -1836, 6925, 5648, -63, 11755, 40, 1250, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00037417124258354306, 0.00014874279440846294, 0.00097304093651473522, 0.00033232293208129704, 0.00020483597472775728, 0.00025555893080309033, 0.00020006299018859863, 0.00034815212711691856, 7.8646022302564234e-05, 0.00031541436328552663, 0.00027376064099371433, 0.0014144299784675241, 0.00049433193635195494, 0.00062348478240892291, 0.00042529019992798567, 0.00059870036784559488, 0.00023190138745121658, 6.4833315263967961e-05, 0.00021403381833806634, 0.00031192979076877236, 0.00022192082542460412, 0.00034510940895415843, 8.6225125414784998e-05, 0.00048060601693578064, 0.00020921765826642513, 0.00049546215450391173, 0.0005440883687697351, 0.00022254540817812085, 0.00031716644298285246, 0.00044656344107352197, 0.000142277916893363, 0.00012246714322827756, 0.000110438464616891, 0.00023465415870305151, 0.00014211112284101546, 0.00038355382275767624, 0.002279283944517374, 0.00023262517061084509, 0.00010906475654337555, 0.00019178903312422335, 0.0001856333838077262, 0.00017217034474015236, 0.00023923665867187083, 0.00019424290803726763, 0.00042247344390489161, 5.7256354921264574e-05, 6.5735490352381021e-05, 0.00019678534590639174, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -4,-45,10,10,-33,-110,-59,81,-28,-10,-31,-4,51,0,-9,2,80,12,38,14,2,-34,-64,31,-15,-24,-4,-19,-53,76,-6,-111,68,-16,-40,-63,-11,-59,0,-10,-17,50,-12,12,-19,83,127,-16, -127,-92,-22,127,-82,71,-108,127,37,13,22,-20,49,29,3,-46,-27,58,12,17,-3,101,4,127,127,-43,-44,42,56,-119,2,-61,95,-14,-33,-127,16,6,-72,-65,-127,23,-103,-123,29,61,41,109, 4,-18,11,-4,-35,3,32,35,13,-35,-3,-10,-18,7,1,1,-49,34,-73,-27,4,-46,127,33,-10,-4,15,-5,11,42,17,-1,28,-19,-11,66,-2,36,16,38,22,-26,10,-50,-7,34,-22,-26, 
  /* [0][1][][] */ -15,-35,-29,6,33,-127,110,-61,-13,4,-27,24,127,15,10,-37,-18,-43,48,43,88,-56,54,17,-68,127,-87,-18,127,-82,37,-127,-33,3,-62,29,2,-99,-45,29,125,127,-11,-127,-62,-49,-23,82, 94,-127,127,7,127,63,-81,-47,46,127,127,-127,-88,127,127,127,127,127,109,127,127,127,6,6,104,-112,-127,124,33,127,127,17,-127,127,127,118,-127,127,-127,-103,35,38,-127,-26,127,-127,-26,74, 35,28,-42,-3,-51,94,-127,78,114,-73,-9,46,-32,11,16,-69,20,-6,-127,19,31,-102,-46,0,59,-16,-25,127,-73,-24,24,-33,-6,15,100,-22,26,10,9,-89,114,-13,17,37,-60,116,115,-86, 
  /* [0][2][][] */ -1,6,3,-29,-1,-80,-27,2,6,-7,-26,3,-11,-8,7,-5,-42,21,37,-45,20,-16,97,1,-97,-4,40,-18,15,5,3,25,15,-13,-59,42,-1,-29,10,58,-24,-21,-7,6,-22,41,-34,8, 32,-29,-40,-41,24,52,107,-93,127,-32,-22,7,-67,-21,-16,-77,-17,117,15,23,20,48,-26,-26,-67,63,83,-24,-88,15,-25,-10,-2,-4,-37,4,52,-33,3,127,-108,-17,-18,65,33,76,-10,-127, -5,15,0,-20,-20,-7,-16,-51,-24,-18,-34,4,23,-9,-13,12,37,44,-21,-17,-4,-20,-50,-2,25,-22,26,-35,-23,6,-3,16,54,-18,-28,-51,-8,26,32,35,-1,-21,-2,8,-22,28,72,-44, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015902277082204819, 0.0063215685077011585, 0.041354238986968994, 0.014123723842203617, 0.0087055284529924393, 0.010861254297196865, 0.0085026770830154419, 0.014796465635299683, 0.0033424559514969587, 0.013405110687017441, 0.01163482666015625, 0.060113273561000824, 0.021009108051657677, 0.026498101651668549, 0.018074832856655121, 0.025444764643907547, 0.0098558086901903152, 0.0027554158587008715, 0.0090964371338486671, 0.01325701642781496, 0.0094316350296139717, 0.014667149633169174, 0.0036645678337663412, 0.020425755530595779, 0.0088917501270771027, 0.021057140082120895, 0.023123754188418388, 0.0094581795856356621, 0.013479573652148247, 0.018978945910930634, 0.006046811118721962, 0.0052048536017537117, 0.0046936348080635071, 0.0099728014320135117, 0.0060397223569452763, 0.01630103774368763, 0.096869565546512604, 0.0098865693435072899, 0.004635252058506012, 0.0081510338932275772, 0.007889418862760067, 0.0073172394186258316, 0.010167557746171951, 0.0082553233951330185, 0.017955120652914047, 0.0024333950132131577, 0.0027937581762671471, 0.0083633773028850555, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 4586, 4552, 13266, 1658, 2871, -1630, 7132, 13047, 2286, -502, 6355, -1810, 12335, -1548, 1734, 25904, -224, 1726, 109, 3456, 4374, 5011, 429, 52391, 6052, 3946, 21822, 1597, 4630, 4586, 526, 845, 702, 1760, -25, 658, -2422, -482, 2116, 1864, 3875, 1685, 4814, 4262, 4422, 2536, 1645, 7389, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00014392664888873696, 0.00017672947433311492, 7.0099908043630421e-05, 0.00018397874373476952, 0.0001960533409146592, 0.00023701121972408146, 0.0001208063040394336, 7.5621108408086002e-05, 0.00020160576968919486, 0.00024229467089753598, 0.00014782650396227837, 0.00022854472626931965, 7.2171773354057223e-05, 0.0002353446907363832, 0.0002489898179192096, 4.3435724364826456e-05, 0.00034710962790995836, 0.00021209372789599001, 0.00029081208049319685, 0.00018964553601108491, 0.00017873644537758082, 0.00016543577658012509, 0.00040881289169192314, 2.2957681721891277e-05, 0.00013827142538502812, 0.00015463655290659517, 4.8394023906439543e-05, 0.00027321264497004449, 0.00016610104648862034, 0.0001707207557046786, 0.00042169020161963999, 0.0004484374076128006, 0.00027555052656680346, 0.0002004812122322619, 0.00030597631121054292, 0.00024750159354880452, 0.00020508737361524254, 0.00028434532578103244, 0.00025584353716112673, 0.00026972818886861205, 0.00018668289703782648, 0.00028004197520203888, 0.00016610143939033151, 0.00019774655811488628, 0.00016696414968464524, 0.00027034568483941257, 0.00039143528556451201, 0.00011722846102202311, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 107,127,-123,-126,6,100,5,59, 
  /* [1][0][][] */ 79,-75,45,-127,-57,68,-111,-53, 
  /* [2][0][][] */ -39,127,117,47,92,-8,43,30, 
  /* [3][0][][] */ 108,59,-74,64,1,-95,-127,-50, 
  /* [4][0][][] */ -36,41,18,-70,-8,125,127,46, 
  /* [5][0][][] */ 27,105,-127,-62,48,108,22,-14, 
  /* [6][0][][] */ -7,127,80,72,112,10,0,-112, 
  /* [7][0][][] */ 127,10,-21,51,18,19,100,26, 
  /* [8][0][][] */ 75,127,65,80,106,84,95,-74, 
  /* [9][0][][] */ 55,98,-127,-78,12,92,11,62, 
  /* [10][0][][] */ -87,-71,30,-68,-10,-33,-62,127, 
  /* [11][0][][] */ 23,-91,-127,-9,11,-10,26,-16, 
  /* [12][0][][] */ -11,-78,-127,-17,-118,23,-52,47, 
  /* [13][0][][] */ -2,5,-111,99,-127,-24,1,-11, 
  /* [14][0][][] */ -48,-46,-127,-10,23,-11,-13,-66, 
  /* [15][0][][] */ 15,-101,-127,15,-78,-20,-27,-11, 
  /* [16][0][][] */ 127,-61,-19,56,-77,20,25,92, 
  /* [17][0][][] */ -12,127,125,-37,-57,-11,-25,-34, 
  /* [18][0][][] */ 3,-127,59,76,-14,-88,48,-87, 
  /* [19][0][][] */ 127,-41,-61,42,-104,6,44,107, 
  /* [20][0][][] */ -33,-127,82,70,-17,-80,1,-78, 
  /* [21][0][][] */ -16,-28,-4,-14,127,10,51,32, 
  /* [22][0][][] */ -127,42,-84,50,49,58,-105,-105, 
  /* [23][0][][] */ -98,-38,71,0,-63,127,103,-17, 
  /* [24][0][][] */ -34,72,9,-26,-21,126,127,18, 
  /* [25][0][][] */ -36,-88,-127,-37,-60,-26,-36,-53, 
  /* [26][0][][] */ -12,78,-15,127,-92,45,-65,12, 
  /* [27][0][][] */ 16,-110,35,76,19,-51,7,-127, 
  /* [28][0][][] */ 16,102,53,51,127,-13,31,-89, 
  /* [29][0][][] */ 127,20,-43,-10,55,-100,-78,30, 
  /* [30][0][][] */ 24,-8,37,-127,23,-23,24,-20, 
  /* [31][0][][] */ 42,-24,6,55,-2,28,7,127, 
  /* [32][0][][] */ -76,-71,7,-63,-65,127,60,72, 
  /* [33][0][][] */ -49,58,60,-29,39,127,-108,85, 
  /* [34][0][][] */ 14,127,-69,-44,6,36,-53,67, 
  /* [35][0][][] */ 15,-127,27,59,-35,-69,19,-103, 
  /* [36][0][][] */ 2,-31,-95,-15,-127,-54,-19,8, 
  /* [37][0][][] */ -40,-127,67,75,-55,-86,-4,-64, 
  /* [38][0][][] */ -79,17,68,-75,-127,-95,-65,97, 
  /* [39][0][][] */ 31,-127,85,53,-5,-78,-25,-62, 
  /* [40][0][][] */ -5,50,16,49,-127,7,-43,10, 
  /* [41][0][][] */ 95,127,-66,-91,36,8,1,-2, 
  /* [42][0][][] */ -8,-57,-31,-12,127,14,69,8, 
  /* [43][0][][] */ 127,42,71,11,-65,-18,59,109, 
  /* [44][0][][] */ 76,47,-39,-3,93,-109,-127,28, 
  /* [45][0][][] */ 53,16,24,21,62,-127,-4,-55, 
  /* [46][0][][] */ 52,-32,8,127,34,53,18,71, 
  /* [47][0][][] */ -112,-86,71,103,-43,23,127,-65, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0021108896471560001, 0.0025919899344444275, 0.0010281151626259089, 0.0026983108837157488, 0.0028754021041095257, 0.0034761079587042332, 0.0017717968439683318, 0.00110909144859761, 0.0029568364843726158, 0.0035535972565412521, 0.0021680865902453661, 0.0033519347198307514, 0.001058502122759819, 0.0034516658633947372, 0.0036517910193651915, 0.00063704687636345625, 0.0050908583216369152, 0.0031106572132557631, 0.0042651742696762085, 0.0027814225759357214, 0.0026214250829070807, 0.0024263518862426281, 0.0059958244673907757, 0.00033670716220512986, 0.0020279479213058949, 0.0022679658140987158, 0.00070976745337247849, 0.0040070535615086555, 0.0024361088871955872, 0.0025038635358214378, 0.0061846887692809105, 0.0065769748762249947, 0.0040413415990769863, 0.002940343227237463, 0.0044875792227685452, 0.0036299640778452158, 0.0030078990384936333, 0.0041703302413225174, 0.0037523107603192329, 0.0039559490978717804, 0.0027379712555557489, 0.004107215441763401, 0.0024361147079616785, 0.0029002355877310038, 0.0024487676564604044, 0.0039650052785873413, 0.0057409573346376419, 0.0017193227540701628, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 8429, 18177, -3172, 8275, -1477, 6699, -11148, -18009, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00022096229076851159, 0.00011198770516784862, 0.00012637622421607375, 0.00014508087770082057, 0.00018556353461463004, 0.00017247868527192622, 0.00023543716815765947, 0.00012808863539248705, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -37,-5,32,6,-33,-11,4,10,-43,0,-57,-57,-31,-51,-9,-30,40,-36,30,33,-13,27,-32,14,0,-45,45,-15,-4,-16,12,8,83,33,30,-127,15,-7,-20,-27,0,-13,39,42,30,3,20,1, 
  /* [1][0][][] */ 7,21,58,-30,-13,44,-53,-34,2,22,-12,-87,8,99,-8,68,-21,11,-20,-65,2,-82,-35,26,-82,-20,-10,-124,-24,-13,35,-70,52,67,-47,4,127,-26,3,41,-28,35,-80,-28,110,-17,-42,-19, 
  /* [2][0][][] */ -15,-35,-68,27,-4,48,28,7,-4,40,0,34,68,-94,10,-49,29,-102,33,29,-28,48,-9,30,-14,59,-29,-84,14,-1,16,-86,-50,-103,38,-20,94,22,-13,-73,3,38,87,34,127,18,12,26, 
  /* [3][0][][] */ -3,16,-74,43,18,-37,-73,-113,16,-24,-38,2,3,30,44,80,-10,5,-33,22,2,-104,22,-55,-85,-15,127,-23,-41,6,-67,12,5,-78,12,-11,-14,-38,-23,101,-45,-34,-3,21,43,10,-47,47, 
  /* [4][0][][] */ -29,-54,-9,7,31,-26,-13,-6,24,-29,58,-74,8,29,7,15,-17,-25,12,-17,-5,-49,4,-16,16,-6,40,44,33,18,-15,16,-11,-13,-3,3,-67,93,36,-31,22,-20,-14,-23,-76,13,127,8, 
  /* [5][0][][] */ 41,-17,12,23,29,-44,29,-127,25,-39,-11,109,-90,67,19,-65,-4,-99,17,4,-38,66,-41,-47,-57,70,-27,-3,-30,50,-41,-36,30,48,40,-11,-49,-12,-47,-44,18,-38,-57,-11,-39,61,82,23, 
  /* [6][0][][] */ 58,-29,19,-4,-38,-24,-35,20,-40,-7,-45,127,-48,-41,-13,59,5,52,21,34,33,-79,-25,26,17,41,-66,8,11,-46,21,43,-3,10,-15,-4,24,5,1,-7,-11,-23,32,57,-3,-36,76,-11, 
  /* [7][0][][] */ -26,6,0,61,31,31,9,37,23,9,68,-8,110,110,45,55,45,40,-17,-2,26,-24,-85,-23,18,-1,-30,61,29,-21,-31,-11,35,4,42,-93,-78,38,35,54,-31,33,80,127,-60,-27,-95,50, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0093908971175551414, 0.0047594774514436722, 0.0053709894418716431, 0.0061659370549023151, 0.0078864498063921928, 0.007330344058573246, 0.010006079450249672, 0.005443766713142395, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 11065, 6261, 3757, -1927, 576, -375, 488, 31790, -938, 2804, 6707, 65743, 1679, 3633, 405, 14090, -2324, 14510, 1015, 6354, 18786, 1255, 4206, -6745, 9984, 2880, 4961, 11752, 502, -3228, -6977, 11745, 8289, 2111, 123, 3445, -6818, 7003, -337, 17970, 802, -863, 7580, 1659, 2946, -125, 4918, 39, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.2887192547786981e-05, 7.6714313763659447e-05, 0.00020239756850060076, 0.00017045618733391166, 0.00066125404555350542, 0.00013919810589868575, 0.00016482021601404995, 0.00010392851254437119, 0.00012761520338244736, 8.6040919995866716e-05, 7.8010853030718863e-05, 4.8666268412489444e-05, 9.7772011940833181e-05, 6.9543217250611633e-05, 0.00025827743229456246, 0.00015612690185662359, 0.0001241785503225401, 0.00032124665449373424, 0.00012725137639790773, 0.00015771047037560493, 0.00010870505502680317, 0.00033876035013236105, 0.00014818907948210835, 0.00029811137937940657, 0.00012060361041221768, 4.9676655180519447e-05, 4.9593989388085902e-05, 9.8416181572247297e-05, 0.00018217854085378349, 0.00071485090302303433, 0.00030123922624625266, 7.2767863457556814e-05, 0.00016301976575050503, 0.00014324818039312959, 0.00019647466251626611, 7.1815768023952842e-05, 0.00011015142081305385, 6.836507236585021e-05, 0.00014612921222578734, 5.8984998759115115e-05, 0.00015906282351352274, 0.00014436847413890064, 6.5477346652187407e-05, 9.0878042101394385e-05, 6.6035310737788677e-05, 0.00070360675454139709, 5.5071242968551815e-05, 0.00017229515651706606, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -62,-122,-18,-4,127,-55,64,-53,-91,-87,-33,-76,101,58,38,-115,67,-30,-9,-44,-111,87,-10,10,-21,101,69,-25,49,-70,-5,-54,-77,-92,43,80,38,86,119,-63,-119,-5,26,66,50,-127,65,70, -87,-127,-83,40,-119,95,39,-76,-43,40,54,-122,127,86,72,-79,-78,-84,39,-57,-114,79,-69,106,-122,113,104,-127,69,-39,10,-125,-48,-90,76,126,117,115,127,-71,-127,-67,57,98,81,96,81,64, -7,-52,-58,87,-40,-35,16,-9,115,27,36,-90,38,43,-58,4,-77,-22,32,-28,-39,21,-61,-9,-96,73,33,-92,17,60,103,-82,-4,2,-7,45,95,59,52,15,-27,88,45,41,44,24,13,-127, 
  /* [0][1][][] */ -127,-119,-27,-50,-89,-77,77,-112,-127,-127,80,-104,92,70,-127,-89,127,-127,-72,-72,-127,91,-58,5,-1,127,96,-49,-104,-71,-27,-64,-78,-127,-127,86,57,95,-7,-76,49,-21,81,98,88,101,112,-116, -102,-87,-113,-83,-27,127,127,-127,103,52,127,-127,97,127,55,-126,70,-92,-127,-127,-125,127,-127,127,-127,113,127,-127,-127,127,-4,-127,-127,-105,44,127,127,127,-19,-127,85,-97,127,127,127,-3,127,102, -20,-86,-127,127,95,-48,37,-26,64,23,21,-45,31,49,79,-67,-9,-10,-17,-45,-29,-4,-76,-28,-119,65,41,-93,-47,49,127,-107,-76,-5,53,70,85,87,-22,-32,34,127,83,34,61,-44,34,21, 
  /* [0][2][][] */ -84,-36,6,22,-55,-34,22,-54,15,-59,27,-42,5,26,-57,-42,-90,-22,98,-20,-38,104,-51,-18,5,80,69,-14,45,59,-11,-24,-13,-88,-46,41,21,20,-66,-54,12,-10,54,46,36,52,32,-81, -70,-53,-44,-55,96,44,31,-67,90,28,-23,-54,-7,40,-123,-127,33,10,57,-56,-73,73,-50,34,-62,50,69,-38,52,14,-31,-45,-64,-11,-67,54,40,32,-109,-85,17,-38,94,69,46,-95,47,-5, -5,-40,-35,-15,-3,-10,5,-23,-82,16,0,-10,-11,11,29,-57,35,31,5,-36,-92,-16,-18,-40,-68,34,22,-34,23,-49,42,-47,-83,5,27,39,22,32,-69,-47,-3,47,27,43,21,-4,27,25, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.003522705752402544, 0.0032603582367300987, 0.0086018964648246765, 0.0072443881072103977, 0.02810329757630825, 0.0059159193187952042, 0.0070048589259386063, 0.0044169616885483265, 0.0054236459545791149, 0.0036567391362041235, 0.0033154611010104418, 0.0020683163311332464, 0.0041553103365004063, 0.0029555866494774818, 0.010976790450513363, 0.0066353930160403252, 0.0052775884978473186, 0.013652983121573925, 0.0054081836715340614, 0.0067026950418949127, 0.0046199648641049862, 0.014397314749658108, 0.0062980358488857746, 0.012669733725488186, 0.0051256534643471241, 0.0021112577524036169, 0.0021077445708215237, 0.0041826874949038029, 0.0077425879426300526, 0.030381161719560623, 0.012802666984498501, 0.0030926340259611607, 0.0069283396005630493, 0.0060880472883582115, 0.0083501730114221573, 0.003052170155569911, 0.0046814354136586189, 0.0029055154882371426, 0.0062104915268719196, 0.0025068623945116997, 0.0067601697519421577, 0.0061356597580015659, 0.0027827871963381767, 0.003862316720187664, 0.0028065007645636797, 0.029903287068009377, 0.0023405277170240879, 0.0073225442320108414, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1236, -329, -367, 917, 13026, 2029, -323, 3601, 1233, 999, 303, 3363, 1086, 554, -813, 582, 2684, 9004, 2463, -459, 2068, -1221, 24, 2033, -240, -623, 1220, -22, 2950, 9422, 1873, -29, 661, 6, 1956, -11, 366, -396, 1326, 1159, 1524, 2105, 94, -222, 507, 2346, 1154, 13, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00043507167720235884, 0.00054619344882667065, 0.00035106175346300006, 0.00038891946314834058, 7.9225443187169731e-05, 0.00036174492561258376, 0.0006360348779708147, 0.00024643613141961396, 0.00037714713835157454, 0.00063817482441663742, 0.00035365726216696203, 0.00029104616260156035, 0.00022313716181088239, 0.00037220309604890645, 0.0003313066263217479, 0.00031184733961708844, 0.00028715701773762703, 0.00010429777466924861, 0.00030519187566824257, 0.00045958714326843619, 0.00027249669074080884, 0.00019980968500021845, 0.00051665876526385546, 0.00035926923737861216, 0.00055246014380827546, 0.00078904186375439167, 0.00040342946886084974, 0.0008339310297742486, 0.00027884292649105191, 0.00010032178397523239, 0.0003836308023892343, 0.00077401369344443083, 0.00045594232506118715, 0.00047063326928764582, 0.00031695578945800662, 0.00042184788617305458, 0.00035688834032043815, 0.00057299633044749498, 0.00039847439620643854, 0.0005150571814738214, 0.0003736706858035177, 0.0003308210289105773, 0.00035339462920092046, 0.00052881170995533466, 0.00049490504898130894, 0.00024131478858180344, 0.00029936977080069482, 0.00040487336809746921, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -51,44,-5,-22,-94,-45,-127,40, 
  /* [1][0][][] */ 73,-56,-35,-50,127,-61,73,16, 
  /* [2][0][][] */ -86,113,-42,-127,55,-10,-29,46, 
  /* [3][0][][] */ 70,-1,77,28,92,127,111,-3, 
  /* [4][0][][] */ -78,-127,76,-11,-52,-103,16,-62, 
  /* [5][0][][] */ 127,-25,54,68,-72,-13,2,-25, 
  /* [6][0][][] */ 20,33,127,-32,34,-27,-43,26, 
  /* [7][0][][] */ 26,7,-127,-26,-45,94,100,-74, 
  /* [8][0][][] */ 4,127,-39,34,47,101,40,58, 
  /* [9][0][][] */ 1,94,-63,86,-2,-127,41,111, 
  /* [10][0][][] */ 10,-127,-14,-34,-86,-121,-59,-72, 
  /* [11][0][][] */ -127,-76,101,52,-7,-69,87,57, 
  /* [12][0][][] */ -35,66,-127,72,44,-59,-90,108, 
  /* [13][0][][] */ 96,-127,107,88,4,38,39,-63, 
  /* [14][0][][] */ -32,105,-47,-127,-25,-103,-8,-52, 
  /* [15][0][][] */ 30,127,17,-27,29,-82,101,-114, 
  /* [16][0][][] */ -100,-127,-39,94,-51,22,-18,61, 
  /* [17][0][][] */ -18,-98,-127,63,-61,50,-66,61, 
  /* [18][0][][] */ -74,-44,-30,79,7,64,-10,127, 
  /* [19][0][][] */ 53,-116,89,-127,18,-61,28,-38, 
  /* [20][0][][] */ 11,124,77,-7,77,127,91,-46, 
  /* [21][0][][] */ 29,114,47,-33,42,-66,93,-127, 
  /* [22][0][][] */ 22,13,106,17,-8,127,34,-40, 
  /* [23][0][][] */ -92,-70,32,-72,97,94,-65,-127, 
  /* [24][0][][] */ -80,-82,30,-72,87,92,-38,-127, 
  /* [25][0][][] */ 127,18,-65,-22,26,30,-68,-7, 
  /* [26][0][][] */ -123,-30,-127,-25,-60,-43,19,-5, 
  /* [27][0][][] */ 93,46,-7,-73,-127,-19,89,93, 
  /* [28][0][][] */ -127,-80,0,61,-85,-109,12,-18, 
  /* [29][0][][] */ 80,80,26,-127,30,15,-52,-102, 
  /* [30][0][][] */ -73,-58,32,-63,79,83,-46,-127, 
  /* [31][0][][] */ 61,42,-7,127,7,-76,1,4, 
  /* [32][0][][] */ -30,127,5,19,27,56,-6,28, 
  /* [33][0][][] */ -30,127,-78,12,26,-26,-30,-6, 
  /* [34][0][][] */ -103,-114,-47,127,-6,22,23,99, 
  /* [35][0][][] */ -52,127,-44,-3,68,122,59,68, 
  /* [36][0][][] */ 80,33,10,-72,-127,-36,111,98, 
  /* [37][0][][] */ -67,117,35,20,-127,106,-38,-90, 
  /* [38][0][][] */ 22,34,32,-1,127,87,114,66, 
  /* [39][0][][] */ -23,-75,23,-16,6,17,-107,127, 
  /* [40][0][][] */ -64,-49,-49,127,-39,9,8,55, 
  /* [41][0][][] */ 127,13,23,126,-58,-6,7,-25, 
  /* [42][0][][] */ -45,11,-71,-127,61,-117,-1,101, 
  /* [43][0][][] */ 27,-5,85,-3,34,127,97,11, 
  /* [44][0][][] */ -21,-18,-60,127,46,4,-35,-45, 
  /* [45][0][][] */ 45,116,114,-116,51,-36,21,-127, 
  /* [46][0][][] */ -36,-121,-41,19,6,34,-64,127, 
  /* [47][0][][] */ 41,24,110,25,79,127,100,-16, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0039537856355309486, 0.0049636228941380978, 0.0031903313938528299, 0.0035343696363270283, 0.00071997428312897682, 0.0032874166499823332, 0.0057800714857876301, 0.0022395288106054068, 0.003427386749535799, 0.0057995188981294632, 0.0032139185350388288, 0.0026449298020452261, 0.0020277956500649452, 0.0033824569545686245, 0.0030108036007732153, 0.0028339640703052282, 0.0026095868088304996, 0.00094782322412356734, 0.0027734814211726189, 0.0041765738278627396, 0.0024763585533946753, 0.0018158034654334188, 0.0046952217817306519, 0.0032649184577167034, 0.0050205723382532597, 0.0071705477312207222, 0.0036662316415458918, 0.0075784856453537941, 0.0025340309366583824, 0.00091169070219621062, 0.0034863080363720655, 0.0070339767262339592, 0.0041434508748352528, 0.0042769573628902435, 0.0028803879395127296, 0.0038336121942847967, 0.0032432815060019493, 0.0052071986719965935, 0.0036212017294019461, 0.0046806670725345612, 0.0033957939594984055, 0.0030063905287533998, 0.003211531788110733, 0.004805663600564003, 0.0044975308701395988, 0.0021929878275841475, 0.0027205720543861389, 0.0036793535109609365, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7810, -1915, 13234, -10360, 23442, 8469, -6174, 11172, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00018644271767698228, 0.00021355945500545204, 0.00015797647938597947, 0.00024822994600981474, 0.0001902579388115555, 0.00017584873421583325, 0.00016496442549396306, 0.00023444950056727976, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -8,-13,-25,-64,-36,-40,29,-25,32,3,-26,-2,103,127,-17,-100, 
  /* [1][0][][] */ 127,-57,-42,24,-54,70,-73,-44,-48,85,-37,-53,-15,2,-55,-17, 
  /* [2][0][][] */ -43,-97,45,53,52,-57,-94,-20,33,-107,30,-127,44,-26,-72,29, 
  /* [3][0][][] */ 36,7,8,16,-10,76,-55,-17,127,44,1,16,12,-13,7,20, 
  /* [4][0][][] */ -97,-29,-30,-122,-17,44,59,-127,34,-26,-40,-33,-125,31,-43,-23, 
  /* [5][0][][] */ 85,47,69,-29,40,-48,-127,-121,-11,-77,60,53,-52,55,62,-42, 
  /* [6][0][][] */ 82,45,-127,-67,30,-68,-16,-80,-36,20,-115,84,88,-86,16,64, 
  /* [7][0][][] */ -127,-6,110,-35,-65,1,3,-62,-51,60,88,-34,63,-25,23,28, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0079238153994083405, 0.0090762767940759659, 0.00671400036662817, 0.010549772530794144, 0.0080859623849391937, 0.0074735707603394985, 0.0070109879598021507, 0.0099641038104891777, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 25880, -713, -435, 2827, -523, 522, 4970, 1023, -690, 257, -2013, 3889, -695, -473, -396, -1056, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 8.7726650235708803e-05, 0.00021707495034206659, 0.00017779949121177197, 0.00017269095405936241, 0.0012964556226506829, 0.00092686433345079422, 0.00022058053582441062, 0.00078193563967943192, 0.00029237809940241277, 0.0010865150252357125, 0.00021500186994671822, 0.00017018173821270466, 0.00012512043758761138, 0.00029418541816994548, 0.00019891244301106781, 0.00062186282593756914, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -2,4,9,4,-19,11,13,18,-2,-11,0,-6,0,-5,5,-1, -2,-8,12,2,13,-2,21,-26,-7,9,-5,84,-5,21,7,-1, -4,-3,1,4,2,-14,9,14,2,2,-6,-9,-5,-2,-1,-3, 
  /* [0][1][][] */ 8,-11,3,0,127,-25,-127,-20,127,127,-2,1,112,-24,-8,-19, -127,127,127,-6,-88,-92,-4,-101,20,-105,127,127,127,127,127,127, 23,-4,-1,-3,-11,127,23,-8,-1,-13,-3,-6,0,-4,-12,-9, 
  /* [0][2][][] */ 0,2,11,-18,-20,14,73,8,-10,-8,-1,4,-5,-2,1,-11, 20,-16,4,-127,5,-16,2,127,-1,1,-2,-7,-8,-64,-12,-36, -2,3,4,5,-1,-5,9,0,0,2,-4,7,-3,-9,-8,-12, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0037283825222402811, 0.0092256851494312286, 0.007556478027254343, 0.0073393653146922588, 0.055099364370107651, 0.039391733705997467, 0.0093746725469827652, 0.033232264220714569, 0.012426069006323814, 0.046176888048648834, 0.0091375792399048805, 0.0072327237576246262, 0.0053176186047494411, 0.012502879835665226, 0.0084537789225578308, 0.026429168879985809, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1270, -124, 279, -420, 50917, 44773, 4941, 9566, 4125, 6690, 942, -183, 4543, -1798, -50, 25188, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00027650772244669497, 0.0011802440276369452, 0.0003211613220628351, 0.00022452825214713812, 2.8712638595607132e-05, 3.3908072509802878e-05, 0.0001604999415576458, 4.0921713662100956e-05, 0.00021569972159340978, 4.4261836592340842e-05, 0.00045498987310566008, 0.001122543471865356, 0.00037000048905611038, 2.2726231691194698e-05, 0.00081054068868979812, 6.2952058215159923e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -110, -31, 
  /* [0][1][][] */ 66, -37, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 106, -94, -10, 
  /* [1][1][][] */ -127, 104, 24, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -95, -80, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 3, -19, -12, 
  /* [3][2][][] */ -99, -125, -41, 
  /* [4][0][][] */ 9, -60, 0, 
  /* [4][1][][] */ 9, -127, 0, 
  /* [4][2][][] */ 6, -80, -18, 
  /* [5][0][][] */ -66, 12, 1, 
  /* [5][1][][] */ -127, 20, 9, 
  /* [5][2][][] */ -87, 11, 3, 
  /* [6][0][][] */ -18, 81, 127, 
  /* [6][1][][] */ -52, 57, -17, 
  /* [6][2][][] */ -38, -54, -92, 
  /* [7][0][][] */ 30, 15, -23, 
  /* [7][1][][] */ 127, 60, -9, 
  /* [7][2][][] */ 33, 9, -17, 
  /* [8][0][][] */ -21, -30, 53, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -16, 63, -9, 
  /* [9][1][][] */ -6, 127, -15, 
  /* [9][2][][] */ 5, 94, -8, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -36, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 64, -93, 35, 
  /* [11][2][][] */ -84, 127, -45, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 98, 17, 13, 
  /* [13][1][][] */ 127, 54, -4, 
  /* [13][2][][] */ 120, 113, 70, 
  /* [14][0][][] */ -30, -27, 48, 
  /* [14][1][][] */ 45, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -91, -35, 16, 
  /* [15][1][][] */ -127, -123, 25, 
  /* [15][2][][] */ -25, -70, 1, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.071727998554706573, 0.30616340041160583, 0.083311453461647034, 0.058244168758392334, 0.0074482555501163006, 0.0087959868833422661, 0.041634786874055862, 0.010615373030304909, 0.055953986942768097, 0.011481824330985546, 0.11802749335765839, 0.29119548201560974, 0.09598066657781601, 0.0058953403495252132, 0.2102598249912262, 0.016330195590853691, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,60,60,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,60,60,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.11003927141427994, } };
const TfArray<1, int> quant46_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,60,60,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,61,61,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.06818293035030365, } };
const TfArray<1, int> quant50_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.076813399791717529, } };
const TfArray<1, int> quant53_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10114071518182755, } };
const TfArray<1, int> quant54_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.06778234988451004, } };
const TfArray<1, int> quant58_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.065201625227928162, } };
const TfArray<1, int> quant61_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.1049911230802536, } };
const TfArray<1, int> quant62_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.073013857007026672, } };
const TfArray<1, int> quant65_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,15,15,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.13854989409446716, } };
const TfArray<1, int> quant66_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,15,15,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,15,15,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.09616098552942276, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant69_scale = { 1, { 0.18519215285778046, } };
const TfArray<1, int> quant69_zero = { 1, { 29 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,15,15,13 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 52, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension44, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 57600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 57600, (TfLiteIntArray*)&tensor_dimension46, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension47, 172800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 178608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 178608, (TfLiteIntArray*)&tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 86400, (TfLiteIntArray*)&tensor_dimension50, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension51, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension53, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension55, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 46128, (TfLiteIntArray*)&tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 56928, (TfLiteIntArray*)&tensor_dimension58, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension59, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension61, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 43200, (TfLiteIntArray*)&tensor_dimension62, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension63, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25200, (TfLiteIntArray*)&tensor_dimension65, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension66, 3600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 21600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21600, (TfLiteIntArray*)&tensor_dimension68, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2928, (TfLiteIntArray*)&tensor_dimension69, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 2925, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
